/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clients;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.mail.MessagingException;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 *
 */
public class Home extends javax.swing.JFrame implements ChangeListener {

    private Helper helper;
    private CompanyModel companyModel;
    private ArrayList<JobOrderModel> jobOrderModel, searchJobModel;
    private ArrayList<CandidateModel> candidatesModel, searchCandidateModel;
    ArrayList<ResumeModel> resumesModel;
    private int height, width, update, prevSelectedTabIndex = 0, searchRequestComboSelectedIndex = 0, refresh, searchCandidateComboSelectedIndex = 0, fieldsLength;
    private ProgressUpdateTask progressUpdateTask;
    private ProgressCancelTask progressCancelTask;
    private ProgressCheckTask progressCheckTask;
    private ProgressRefreshTask progressRefreshTask;
    private ProgressInsertTask progressInsertTask;
    private ProgressDeleteTask progressDeleteTask;
    private JPasswordField passText, confPassText;
    private JTextField emailText, searchRequestText, searchCandidateText;
    private JButton changePassButton, changeEmailButton, cancelButton, checkButton, insertButton, detailsJobButton, detailsCandidateButton, deleteCandidateButton;
    private JTable requestTable, candidateTable;
    private JScrollPane requestScrollPane, candidateScrollPane, jsp;
    private DefaultTableModel requestTableModel, candidateTableModel;
    private JComboBox searchRequestComboBox, searchCandidateComboBox, newPositionComboBox;
    private JTextField[] textFields;
    private JTextArea[] textAreas;
    private boolean tabbedPaneCreated = false, waiting = false;
    long jobOrderId;

    public Home(CompanyModel companyModel, ArrayList<JobOrderModel> jobOrderModel, ArrayList<CandidateModel> candidatesModel, ArrayList<ResumeModel> resumesModel) {
        this.companyModel = companyModel;
        this.jobOrderModel = jobOrderModel;
        this.candidatesModel = candidatesModel;
        this.resumesModel = resumesModel;
        initComponents();
    }

    private Home() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);
        getContentPane().add(tabbedPane);
        tabbedPane.setBounds(35, 24, 355, 130);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        width = (int) screenSize.getWidth();
        height = (int) screenSize.getHeight();
        getContentPane().setBackground(Color.GRAY);
        helper = new Helper();

        //size and location of window opened
        setSize(width, height * 92 / 100);
        setLocationRelativeTo(null);

        //initialize components  
        tabbedPane.setSize(width, height * 92 / 100);
        tabbedPane.setLocation(0, 0);
        tabbedPane.addChangeListener(this);
        JComponent panel1 = (JComponent) createTabPanel(0);
        tabbedPane.addTab("Your Job Requests (" + jobOrderModel.size() + ")", null, panel1, "You can manage your job pending requests.");

        JComponent panel2 = (JComponent) createTabPanel(1);
        tabbedPane.addTab("Candidates Found (" + candidatesModel.size() + ")", null, panel2, "You can see the candidates who have been found.");

        JComponent panel3 = (JComponent) createTabPanel(2);
        tabbedPane.addTab("Request a job", null, panel3, "You can request a job.");

        JComponent panel4 = (JComponent) createTabPanel(3);
        tabbedPane.addTab("Personal Data", null, panel4, "You can change your password or email.");
        tabbedPaneCreated = true;
    }//GEN-LAST:event_formWindowOpened

    protected Component createTabPanel(int index) {
        JPanel panel = new JPanel();
        panel.setLayout(null);
        panel.setBackground(Color.GRAY);
        if (index == 0) {
            String columns[] = {"Date", "InvoiceNo", "Department", "Contact Name", "Phone"};
            String searchBy[] = {"Date", "InvoiceNo", "Department"};

            ImageIcon imageIcon = new ImageIcon(getClass().getResource("/img/refresh.png"));
            Image image = imageIcon.getImage();
            Image newimg = image.getScaledInstance(width * 2 / 100, height * 3 / 100, java.awt.Image.SCALE_SMOOTH);
            imageIcon = new ImageIcon(newimg);

            JLabel refreshLabel = new JLabel();
            refreshLabel.setSize(width * 2 / 100, height * 3 / 100);
            refreshLabel.setLocation(width * 2 / 100, height * 4 / 100);
            refreshLabel.setIcon(imageIcon);
            refreshLabel.addMouseListener(new MouseAdapter() {

                public void mouseClicked(MouseEvent e) {
                    if (!waiting) {
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to refresh data?", "Confirmation", dialogButton);
                        if (dialogResult == JOptionPane.YES_OPTION) {
                            refresh = 1;
                            progressRefreshTask = new ProgressRefreshTask();
                            progressRefreshTask.execute();
                        }
                    }
                }
            });
            panel.add(refreshLabel);

            JLabel searchLabel = new JLabel("Search :");
            Font currentFont = searchLabel.getFont();
            searchLabel.setSize(width * 10 / 100, height * 3 / 100);
            searchLabel.setLocation(width * 8 / 100, height * 8 / 100);
            searchLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
            panel.add(searchLabel);

            searchRequestText = new JTextField();
            searchRequestText.setSize(width * 10 / 100, height * 4 / 100);
            searchRequestText.setLocation(width * 15 / 100, height * 8 / 100);
            searchRequestText.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
            searchRequestText.addKeyListener(new KeyAdapter() {
                public void keyReleased(KeyEvent e) {
                    setJobDataToTable();
                }
            });
            panel.add(searchRequestText);

            detailsJobButton = new JButton("Details");
            detailsJobButton.setSize(width * 13 / 100, height * 5 / 100);
            detailsJobButton.setLocation(width * 55 / 100, height * 7 / 100);
            detailsJobButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            detailsJobButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (detailsJobButton.isEnabled()) {
                        if (requestTable.getRowCount() > 0) {
                            if (requestTable.getSelectedRowCount() != 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "You must choose only one job order!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                int dialogButton = JOptionPane.YES_NO_OPTION;
                                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to see details about the selected job request?", "Confirmation", dialogButton);
                                if (dialogResult == JOptionPane.YES_OPTION) {
                                    JobOrderModel temp = searchJobModel.get(requestTable.getSelectedRow());
                                    JobDetails details = new JobDetails(companyModel, jobOrderModel, candidatesModel, resumesModel, temp);
                                    details.main(null);
                                    dispose();
                                }
                            }
                        }
                    }
                }
            });
            panel.add(detailsJobButton);

            cancelButton = new JButton("Cancel Job Request");
            cancelButton.setSize(width * 13 / 100, height * 5 / 100);
            cancelButton.setLocation(width * 75 / 100, height * 7 / 100);
            cancelButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            cancelButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (cancelButton.isEnabled()) {
                        if (requestTable.getRowCount() > 0) {
                            if (!helper.isConnected()) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "Please check your internet connection!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else if (requestTable.getSelectedRowCount() != 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "You must choose only one job order!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                int dialogButton = JOptionPane.YES_NO_OPTION;
                                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to cancel the selected job request?", "Confirmation", dialogButton);
                                if (dialogResult == JOptionPane.YES_OPTION) {
                                    progressCancelTask = new ProgressCancelTask();
                                    progressCancelTask.execute();
                                }
                            }
                        }
                    }
                }
            });
            panel.add(cancelButton);

            searchRequestComboBox = new JComboBox(searchBy);
            searchRequestComboBox.setSize(width * 10 / 100, height * 4 / 100);
            searchRequestComboBox.setLocation(width * 28 / 100, height * 8 / 100);
            searchRequestComboBox.addItemListener(new ItemListener() {
                public void itemStateChanged(ItemEvent evt) {
                    if (evt.getStateChange() == evt.SELECTED) {
                        searchRequestComboSelectedIndex = searchRequestComboBox.getSelectedIndex();
                        setJobDataToTable();
                    }
                }
            });
            panel.add(searchRequestComboBox);

            requestTable = new JTable();
            requestScrollPane = new JScrollPane(requestTable);
            requestTable.setFillsViewportHeight(true);
            requestTable.setDefaultRenderer(Object.class, new MyTableCellRender());
            requestTableModel = (DefaultTableModel) requestTable.getModel();
            for (int i = 0; i < columns.length; i++) {
                requestTableModel.addColumn(columns[i]);
            }

            requestTable.setRowHeight(height * 5 / 100);
            requestTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 18));
            requestTable.setShowGrid(true);
            requestTable.setBackground(new Color(204, 204, 204));
            requestScrollPane.setLocation(width * 1 / 100, height * 15 / 100);
            requestScrollPane.setSize(width * 98 / 100, height * 71 / 100);
            panel.add(requestScrollPane);
            setJobDataToTable();
        } else if (index == 1) {
            String columns[] = {"Name", "Address", "Residence Number", "Business Number"};
            String searchBy[] = {"Name", "Address"};

            ImageIcon imageIcon = new ImageIcon(getClass().getResource("/img/refresh.png"));
            Image image = imageIcon.getImage();
            Image newimg = image.getScaledInstance(width * 2 / 100, height * 3 / 100, java.awt.Image.SCALE_SMOOTH);
            imageIcon = new ImageIcon(newimg);

            JLabel refreshLabel = new JLabel();
            refreshLabel.setSize(width * 2 / 100, height * 3 / 100);
            refreshLabel.setLocation(width * 2 / 100, height * 4 / 100);
            refreshLabel.setIcon(imageIcon);
            refreshLabel.addMouseListener(new MouseAdapter() {

                public void mouseClicked(MouseEvent e) {
                    if (!waiting) {
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to refresh data?", "Confirmation", dialogButton);
                        if (dialogResult == JOptionPane.YES_OPTION) {
                            refresh = 2;
                            progressRefreshTask = new ProgressRefreshTask();
                            progressRefreshTask.execute();
                        }
                    }
                }
            });
            panel.add(refreshLabel);

            JLabel searchLabel = new JLabel("Search :");
            Font currentFont = searchLabel.getFont();
            searchLabel.setSize(width * 10 / 100, height * 3 / 100);
            searchLabel.setLocation(width * 8 / 100, height * 8 / 100);
            searchLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
            panel.add(searchLabel);

            searchCandidateText = new JTextField();
            searchCandidateText.setSize(width * 10 / 100, height * 4 / 100);
            searchCandidateText.setLocation(width * 15 / 100, height * 8 / 100);
            searchCandidateText.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
            searchCandidateText.addKeyListener(new KeyAdapter() {
                public void keyReleased(KeyEvent e) {
                    setCandidateDataToTable();
                }
            });
            panel.add(searchCandidateText);

            detailsCandidateButton = new JButton("Details");
            detailsCandidateButton.setSize(width * 13 / 100, height * 5 / 100);
            detailsCandidateButton.setLocation(width * 47 / 100, height * 7 / 100);
            detailsCandidateButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            detailsCandidateButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (detailsCandidateButton.isEnabled()) {
                        if (candidateTable.getRowCount() > 0) {
                            if (candidateTable.getSelectedRowCount() != 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "You must choose only one candidate!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                CandidateModel temp = searchCandidateModel.get(candidateTable.getSelectedRow());
                                CandidateDetails details = new CandidateDetails(companyModel, jobOrderModel, candidatesModel, resumesModel, temp);
                                details.main(null);
                                ResumeModel _temp = new ResumeModel();
                                for (ResumeModel resumeItem : resumesModel) {
                                    if (temp.candidateId == resumeItem.candidateId) {
                                        _temp = resumeItem;
                                        break;
                                    }
                                }
                                ResumeFrame resumeDetails = new ResumeFrame(_temp);
                                resumeDetails.main(null);
                                dispose();
                            }
                        }
                    }
                }
            });
            panel.add(detailsCandidateButton);

            checkButton = new JButton("Checked");
            checkButton.setSize(width * 13 / 100, height * 5 / 100);
            checkButton.setLocation(width * 64 / 100, height * 7 / 100);
            checkButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            checkButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (checkButton.isEnabled()) {
                        if (candidateTable.getRowCount() > 0) {
                            if (!helper.isConnected()) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "Please check your internet connection!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else if (candidateTable.getSelectedRowCount() != 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "You must choose only one candidate!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                JFrame frame = new JFrame("Departments");
                                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                                frame.getContentPane().setBackground(Color.GRAY);
                                frame.setResizable(false);
                                frame.setVisible(true);
                                frame.setLayout(null);
                                frame.setSize(width * 30 / 100, height * 80 / 100);
                                frame.setLocationRelativeTo(null);
                                JTable table = new JTable();
                                JScrollPane scrollPane = new JScrollPane(table);
                                table.setFillsViewportHeight(true);
                                table.setDefaultRenderer(Object.class, new MyTableCellRender());
                                DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
                                tableModel.addColumn("Department");
                                for (JobOrderModel item : jobOrderModel) {
                                    Vector row = new Vector();
                                    row.add(item.department);
                                    tableModel.addRow(row);
                                }
                                table.setRowHeight(height * 5 / 100);
                                table.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 18));
                                table.setShowGrid(true);
                                table.setBackground(new Color(204, 204, 204));
                                scrollPane.setLocation(width * 5 / 100, height * 5 / 100);
                                scrollPane.setSize(width * 20 / 100, height * 50 / 100);
                                frame.add(scrollPane);

                                JButton frameCheckedButton = new JButton("Checked");
                                Font currentFont = frameCheckedButton.getFont();
                                frameCheckedButton.setSize(width * 10 / 100, height * 5 / 100);
                                frameCheckedButton.setLocation(width * 10 / 100, height * 65 / 100);
                                frameCheckedButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
                                frameCheckedButton.addActionListener(new ActionListener() {
                                    public void actionPerformed(ActionEvent e) {
                                        if (!helper.isConnected()) {
                                            JOptionPane.showMessageDialog(frame,
                                                    "Please check your internet connection!",
                                                    "Error",
                                                    JOptionPane.ERROR_MESSAGE);
                                        } else if (table.getSelectedRowCount() != 1) {
                                            JOptionPane.showMessageDialog(frame,
                                                    "You must choose only one department!",
                                                    "Error",
                                                    JOptionPane.ERROR_MESSAGE);
                                        } else {
                                            int dialogButton = JOptionPane.YES_NO_OPTION;
                                            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirmation", dialogButton);
                                            if (dialogResult == JOptionPane.YES_OPTION) {
                                                frame.dispose();
                                                jobOrderId = jobOrderModel.get(table.getSelectedRow()).jobOrderId;
                                                progressCheckTask = new ProgressCheckTask();
                                                progressCheckTask.execute();
                                            }
                                        }
                                    }
                                });
                                frame.add(frameCheckedButton);
                            }
                        }
                    }
                }
            });
            panel.add(checkButton);

            deleteCandidateButton = new JButton("Delete");
            deleteCandidateButton.setSize(width * 13 / 100, height * 5 / 100);
            deleteCandidateButton.setLocation(width * 81 / 100, height * 7 / 100);
            deleteCandidateButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            deleteCandidateButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (deleteCandidateButton.isEnabled()) {
                        if (candidateTable.getRowCount() > 0) {
                            if (!helper.isConnected()) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "Please check your internet connection!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else if (candidateTable.getSelectedRowCount() != 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "You must choose only one candidate!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                int dialogButton = JOptionPane.YES_NO_OPTION;
                                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirmation", dialogButton);
                                if (dialogResult == JOptionPane.YES_OPTION) {
                                    progressDeleteTask = new ProgressDeleteTask();
                                    progressDeleteTask.execute();
                                }
                            }
                        }
                    }
                }
            });
            panel.add(deleteCandidateButton);

            searchCandidateComboBox = new JComboBox(searchBy);
            searchCandidateComboBox.setSize(width * 10 / 100, height * 4 / 100);
            searchCandidateComboBox.setLocation(width * 28 / 100, height * 8 / 100);
            searchCandidateComboBox.addItemListener(new ItemListener() {
                public void itemStateChanged(ItemEvent evt) {
                    if (evt.getStateChange() == evt.SELECTED) {
                        searchCandidateComboSelectedIndex = searchCandidateComboBox.getSelectedIndex();
                        setCandidateDataToTable();
                    }
                }
            });
            panel.add(searchCandidateComboBox);

            candidateTable = new JTable();
            candidateScrollPane = new JScrollPane(candidateTable);
            candidateTable.setFillsViewportHeight(true);
            candidateTable.setDefaultRenderer(Object.class, new MyTableCellRender());
            candidateTableModel = (DefaultTableModel) candidateTable.getModel();
            for (int i = 0; i < columns.length; i++) {
                candidateTableModel.addColumn(columns[i]);
            }

            candidateTable.setRowHeight(height * 5 / 100);
            candidateTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 18));
            candidateTable.setShowGrid(true);
            candidateTable.setBackground(new Color(204, 204, 204));
            candidateScrollPane.setLocation(width * 1 / 100, height * 15 / 100);
            candidateScrollPane.setSize(width * 98 / 100, height * 71 / 100);
            panel.add(candidateScrollPane);
            setCandidateDataToTable();
        } else if (index == 2) {
            String fieldsName[] = {"*Contact Name", "*Department", "*Billing Contact", "*Phone", "Salary", "*Starting Date", "Address", "*Business type",
                "Placement Fee", "*Placement Date", "*Actual Starting Date", "New Position", "*Educational Requirements", "*Experience Requirements", "Duties", "Bonuses", "*Travel Requirements", "Car",
                "Career Opportunities", "Interview", "Order Taker", "Counselor Ultimate"};
            int x = 4, y = 2, count = 1;
            JPanel container = new JPanel();
            jsp = new JScrollPane(container);
            jsp.setLocation(width * 1 / 100, height * 3 / 100);
            jsp.setSize(width * 98 / 100, height * 82 / 100);
            container.setLayout(null);
            container.setPreferredSize(new Dimension(width * 97 / 100, height * 152 / 100));
            JLabel[] labels = new JLabel[fieldsName.length];
            JScrollPane[] scrollArray = new JScrollPane[10];
            textFields = new JTextField[11];
            textAreas = new JTextArea[10];
            fieldsLength = fieldsName.length;
            Font currentFont;
            for (int i = 0; i < fieldsName.length; i++) {
                labels[i] = new JLabel(fieldsName[i] + " :");
                currentFont = labels[i].getFont();
                labels[i].setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
                labels[i].setSize(width, height * 5 / 100);
                labels[i].setLocation(width * x / 100, height * y / 100);
                container.add(labels[i]);

                if (i < 11) {
                    textFields[i] = new JTextField();
                    textFields[i].setSize(width * 15 / 100, height * 5 / 100);
                    textFields[i].setLocation(width * x / 100, height * (y + 5) / 100);
                    if (i == 6) {
                        textFields[i].setEnabled(false);
                        textFields[i].setText(companyModel.position);
                    }
                    if (i == 5 || i == 9 || i == 10) {
                        textFields[i].setEnabled(false);
                        textFields[i].setDisabledTextColor(Color.BLACK);
                        textFields[i].setName("name" + i);
                        textFields[i].addMouseListener(new MouseAdapter() {
                            @Override
                            public void mouseClicked(MouseEvent e) {
                                if (!waiting) {
                                    JTextField textField;
                                    textField = (JTextField) e.getSource();
                                    String date = new DatePicker(Home.this, textField.getText()).setPickedDate();
                                    textField.setText(date);
                                }
                            }
                        });
                    }
                    container.add(textFields[i]);
                } else if (i == 11) {
                    String position[] = {"Yes", "No"};
                    newPositionComboBox = new JComboBox(position);
                    newPositionComboBox.setSize(width * 10 / 100, height * 5 / 100);
                    newPositionComboBox.setLocation(width * x / 100, height * (y + 5) / 100);
                    container.add(newPositionComboBox);
                } else {
                    textAreas[i - 12] = new JTextArea();
                    scrollArray[i - 12] = new JScrollPane(textAreas[i - 12]);
                    scrollArray[i - 12].setSize(width * 15 / 100, height * 15 / 100);
                    scrollArray[i - 12].setLocation(width * x / 100, height * (y + 5) / 100);
                    container.add(scrollArray[i - 12]);
                }
                if ((count % 4) == 0) {
                    x = 4;
                    if (i < 12) {
                        y += 15;
                    } else {
                        y += 25;
                    }
                } else {
                    x += 25;
                }
                count++;
            }
            insertButton = new JButton("Insert");
            currentFont = insertButton.getFont();
            insertButton.setSize(width * 16 / 100, height * 8 / 100);
            insertButton.setLocation(width * 42 / 100, height * (y + 34) / 100);
            insertButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            insertButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (insertButton.isEnabled()) {
                        if (!helper.isConnected()) {
                            JOptionPane.showMessageDialog(getContentPane(),
                                    "Please check your internet connection!",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                        } else {
                            int error = 0;
                            if (textAreas[0].getText().trim().length() == 0 || textAreas[1].getText().trim().length() == 0 || textAreas[4].getText().trim().length() == 0) {
                                error = 1;
                            }
                            for (int i = 0; i < fieldsLength; i++) {
                                if (error == 1 || error == 2) {
                                    break;
                                }
                                if (i < 11) {
                                    if (i != 4 && i != 8) {
                                        if (textFields[i].getText().trim().length() == 0) {
                                            error = 1;
                                        } else if (!helper.fieldValidity(textFields[i].getText())) {
                                            error = 2;
                                        }
                                    } else if (i == 4 || i == 8) {
                                        if (textFields[i].getText().trim().length() > 0) {
                                            if (!textFields[i].getText().trim().replace(",", ".").matches("((-|\\+)?[0-9]+(\\.[0-9]+)?)+")) {
                                                error = 2;
                                            }
                                        }
                                    }
                                } else if (i > 11) {
                                    if (!helper.fieldValidity(textAreas[i - 12].getText())) {
                                        error = 2;
                                    }
                                }
                            }
                            if (error == 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "The requirement fields cannot be blank!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else if (error == 2) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "Invalid fields!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                int dialogButton = JOptionPane.YES_NO_OPTION;
                                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirmation", dialogButton);
                                if (dialogResult == JOptionPane.YES_OPTION) {
                                    progressInsertTask = new ProgressInsertTask();
                                    progressInsertTask.execute();
                                }
                            }
                        }
                    }
                }
            });
            container.add(insertButton);

            panel.add(jsp);
        } else {
            JPanel passPanel = new JPanel();
            passPanel.setSize(width * 30 / 100, height * 30 / 100);
            passPanel.setLocation(width * 16 / 100, height * 26 / 100);
            passPanel.setBorder(BorderFactory.createTitledBorder("Change Password"));
            passPanel.setLayout(null);
            panel.add(passPanel);

            JPanel emailPanel = new JPanel();
            emailPanel.setSize(width * 24 / 100, height * 30 / 100);
            emailPanel.setLocation(width * 56 / 100, height * 26 / 100);
            emailPanel.setBorder(BorderFactory.createTitledBorder("Change Email"));
            emailPanel.setLayout(null);
            panel.add(emailPanel);

            JLabel passLabel = new JLabel("New Password :");
            Font currentFont = passLabel.getFont();
            passLabel.setBounds(0, height * 5 / 100, width * 15 / 100, height * 5 / 100);
            passLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
            passLabel.setHorizontalAlignment(SwingConstants.RIGHT);
            passPanel.add(passLabel);

            passText = new JPasswordField();
            passText.setSize(width * 10 / 100, height * 4 / 100);
            passText.setLocation(width * 17 / 100, height * 6 / 100);
            passPanel.add(passText);

            JLabel confPassLabel = new JLabel("Retype New Password :");
            confPassLabel.setBounds(0, height * 11 / 100, width * 15 / 100, height * 5 / 100);
            confPassLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
            confPassLabel.setHorizontalAlignment(SwingConstants.RIGHT);
            passPanel.add(confPassLabel);

            confPassText = new JPasswordField();
            confPassText.setSize(width * 10 / 100, height * 4 / 100);
            confPassText.setLocation(width * 17 / 100, height * 12 / 100);
            passPanel.add(confPassText);

            changePassButton = new JButton();
            changePassButton.setSize(width * 8 / 100, height * 5 / 100);
            changePassButton.setLocation(width * 18 / 100, height * 20 / 100);
            changePassButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            changePassButton.setText("Change");
            changePassButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (changePassButton.isEnabled()) {
                        if (!helper.isConnected()) {
                            JOptionPane.showMessageDialog(getContentPane(),
                                    "Please check your internet connection!",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                        } else if (passText.getText().trim().length() == 0 || confPassText.getText().trim().length() == 0) {
                            JOptionPane.showMessageDialog(getContentPane(),
                                    "No empty fields allowed!",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                        } else if (!passText.getText().trim().equals(confPassText.getText().trim())) {
                            JOptionPane.showMessageDialog(getContentPane(),
                                    "Passwords don't match!",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                        } else if (passText.getText().trim().equals(companyModel.pass)) {
                            JOptionPane.showMessageDialog(getContentPane(),
                                    "The password you entered it's the same with the current password!",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                        } else if (!helper.fieldValidity(passText.getText())) {
                            JOptionPane.showMessageDialog(getContentPane(),
                                    "Invalid fields!",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                        } else {
                            int dialogButton = JOptionPane.YES_NO_OPTION;
                            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to change your password?", "Confirmation", dialogButton);
                            if (dialogResult == JOptionPane.YES_OPTION) {
                                update = 1;
                                progressUpdateTask = new Home.ProgressUpdateTask();
                                progressUpdateTask.execute();
                            }
                        }
                    }
                }
            });
            passPanel.add(changePassButton);

            JLabel emailLabel = new JLabel("Email :");
            emailLabel.setBounds(width * 4 / 100, height * 11 / 100, width * 15 / 100, height * 5 / 100);
            emailLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
            emailPanel.add(emailLabel);

            emailText = new JTextField();
            emailText.setSize(width * 10 / 100, height * 4 / 100);
            emailText.setLocation(width * 10 / 100, height * 12 / 100);
            emailText.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
            emailPanel.add(emailText);

            changeEmailButton = new JButton();
            changeEmailButton.setSize(width * 8 / 100, height * 5 / 100);
            changeEmailButton.setLocation(width * 11 / 100, height * 20 / 100);
            changeEmailButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            changeEmailButton.setText("Change");
            changeEmailButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (changeEmailButton.isEnabled()) {
                        if (!helper.isConnected()) {
                            JOptionPane.showMessageDialog(getContentPane(),
                                    "Please check your internet connection!",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                        } else if (!helper.emailValidity(emailText.getText().trim())) {
                            JOptionPane.showMessageDialog(getContentPane(),
                                    "Please enter a valid Email!",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                        } else if (emailText.getText().trim().equals(companyModel.email)) {
                            JOptionPane.showMessageDialog(getContentPane(),
                                    "The email you entered it's the same with the current email!",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                        } else {
                            int dialogButton = JOptionPane.YES_NO_OPTION;
                            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to change your email?", "Confirmation", dialogButton);
                            if (dialogResult == JOptionPane.YES_OPTION) {
                                update = 2;
                                progressUpdateTask = new Home.ProgressUpdateTask();
                                progressUpdateTask.execute();
                            }
                        }
                    }
                }
            });
            emailPanel.add(changeEmailButton);
        }
        return panel;
    }

    private void setJobDataToTable() {
        requestTableModel.setRowCount(0);
        searchJobModel = new ArrayList<JobOrderModel>();
        for (JobOrderModel item : jobOrderModel) {
            if ((item.dateInserted.replaceAll("/", "-").startsWith(searchRequestText.getText().replaceAll("/", "-")) && searchRequestComboSelectedIndex == 0)
                    || (String.valueOf(item.invoiceNo).startsWith(searchRequestText.getText()) && searchRequestComboSelectedIndex == 1)
                    || (item.department.toLowerCase().startsWith(searchRequestText.getText().toLowerCase()) && searchRequestComboSelectedIndex == 2)) {
                Vector row = new Vector();
                row.add(item.dateInserted);
                row.add(item.invoiceNo);
                row.add(item.department);
                row.add(item.contactName);
                row.add(item.phone);
                requestTableModel.addRow(row);
                searchJobModel.add(item);
            }
        }
        if (tabbedPaneCreated) {
            tabbedPane.setTitleAt(0, "Your Job Requests (" + searchJobModel.size() + ")");
        }
    }

    private void setCandidateDataToTable() {
        candidateTableModel.setRowCount(0);
        searchCandidateModel = new ArrayList<CandidateModel>();
        for (CandidateModel item : candidatesModel) {
            if ((item.name.toLowerCase().startsWith(searchCandidateText.getText().toLowerCase()) && searchCandidateComboSelectedIndex == 0)
                    || (item.address.toLowerCase().startsWith(searchCandidateText.getText().toLowerCase()) && searchCandidateComboSelectedIndex == 1)) {
                Vector row = new Vector();
                row.add(item.name);
                row.add(item.address);
                row.add(item.residenceNumber);
                row.add(item.businessNumber);
                candidateTableModel.addRow(row);
                searchCandidateModel.add(item);
            }
        }
        if (tabbedPaneCreated) {
            tabbedPane.setTitleAt(1, "Candidates Found (" + searchCandidateModel.size() + ")");
        }

    }

    public void stateChanged(ChangeEvent e) {
        if (prevSelectedTabIndex == 0) {
            requestTable.clearSelection();
            searchRequestText.setText("");
            searchRequestComboBox.setSelectedIndex(0);
            requestScrollPane.getVerticalScrollBar().setValue(0);
            requestScrollPane.getHorizontalScrollBar().setValue(0);
        } else if (prevSelectedTabIndex == 1) {
            candidateTable.clearSelection();
            searchCandidateText.setText("");
            searchCandidateComboBox.setSelectedIndex(0);
            candidateScrollPane.getVerticalScrollBar().setValue(0);
            candidateScrollPane.getHorizontalScrollBar().setValue(0);
        } else if (prevSelectedTabIndex == 2) {
            for (int i = 0; i < fieldsLength; i++) {
                if (i < 11) {
                    if (i != 6) {
                        textFields[i].setText("");
                    }
                } else if (i == 11) {
                    newPositionComboBox.setSelectedIndex(0);
                } else {
                    textAreas[i - 12].setText("");
                }
            }
            jsp.getVerticalScrollBar().setValue(0);
            jsp.getHorizontalScrollBar().setValue(0);
        } else if (prevSelectedTabIndex == 3) {
            passText.setText("");
            confPassText.setText("");
            emailText.setText("");
        }
        tabbedPane = (JTabbedPane) e.getSource();
        int selectedIndex = tabbedPane.getSelectedIndex();
        if (selectedIndex == 0) {
            setJobDataToTable();
        } else if (selectedIndex == 1) {
            setCandidateDataToTable();
        }
        prevSelectedTabIndex = selectedIndex;
    }

    class ProgressUpdateTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            setCursor(Cursor.WAIT_CURSOR);
            tabbedPane.setEnabled(false);
            passText.setEnabled(false);
            confPassText.setEnabled(false);
            changePassButton.setEnabled(false);
            emailText.setEnabled(false);
            changeEmailButton.setEnabled(false);
            waiting = true;
            String url, urlParameters;
            if (update == 1) {
                url = helper.getDomainName() + "updateClientPass.php";
                urlParameters = "id=" + companyModel.id + "&pass=" + passText.getText().trim();
            } else {
                url = helper.getDomainName() + "updateClientEmail.php";
                urlParameters = "id=" + companyModel.id + "&email=" + emailText.getText().trim();
            }
            String response = helper.postMethod(url, urlParameters);
            if (response.charAt(0) == 'A' || response.charAt(0) == 'E') {
                JOptionPane.showMessageDialog(getContentPane(),
                        response,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                if (update == 1) {
                    companyModel.pass = passText.getText();
                    passText.setText("");
                    confPassText.setText("");
                } else {
                    companyModel.email = emailText.getText();
                    emailText.setText("");
                }
                JOptionPane.showMessageDialog(getContentPane(),
                        response);
            }
            waiting = false;
            tabbedPane.setEnabled(true);
            passText.setEnabled(true);
            confPassText.setEnabled(true);
            changePassButton.setEnabled(true);
            emailText.setEnabled(true);
            changeEmailButton.setEnabled(true);
            setCursor(Cursor.DEFAULT_CURSOR);
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    class ProgressCancelTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            setCursor(Cursor.WAIT_CURSOR);
            tabbedPane.setEnabled(false);
            cancelButton.setEnabled(false);
            searchRequestText.setEnabled(false);
            searchRequestComboBox.setEnabled(false);
            waiting = true;
            String url = helper.getDomainName() + "cancelJob.php";
            String urlParameters = "jobId=" + searchJobModel.get(requestTable.getSelectedRow()).jobOrderId;
            String response = helper.postMethod(url, urlParameters);
            if (response.charAt(0) == 'A') {
                JOptionPane.showMessageDialog(getContentPane(),
                        response,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                int index = helper.getJobModelIndex(searchJobModel.get(requestTable.getSelectedRow()).jobOrderId, jobOrderModel);
                jobOrderModel.remove(index);
                searchJobModel.remove(requestTable.getSelectedRow());
                setJobDataToTable();
                JOptionPane.showMessageDialog(getContentPane(),
                        response);
            }
            waiting = false;
            tabbedPane.setEnabled(true);
            cancelButton.setEnabled(true);
            searchRequestText.setEnabled(true);
            searchRequestComboBox.setEnabled(true);
            setCursor(Cursor.DEFAULT_CURSOR);
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    class ProgressCheckTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            setCursor(Cursor.WAIT_CURSOR);
            tabbedPane.setEnabled(false);
            checkButton.setEnabled(false);
            deleteCandidateButton.setEnabled(false);
            detailsCandidateButton.setEnabled(false);
            searchCandidateText.setEnabled(false);
            searchCandidateComboBox.setEnabled(false);
            waiting = true;
            String url = helper.getDomainName() + "checkCandidate.php";
            String urlParameters = "candidateId=" + searchCandidateModel.get(candidateTable.getSelectedRow()).candidateId + "&jobOrderId=" + jobOrderId + "&clientId=" + companyModel.id;
            String response = helper.postMethod(url, urlParameters);
            if (response.charAt(0) == 'A') {
                JOptionPane.showMessageDialog(getContentPane(),
                        response,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                int index = helper.getCandidateModelIndex(searchCandidateModel.get(candidateTable.getSelectedRow()).candidateId, candidatesModel);
                candidatesModel.remove(index);
                index = helper.getJobModelIndex(jobOrderId, jobOrderModel);
                jobOrderModel.remove(index);
                try {
                    CandidateModel temp = searchCandidateModel.get(candidateTable.getSelectedRow());
                    String text = "Dear PEC,\n\nAfter we check candidate ( " + temp.name + ") we would like to make an interview.";
                    helper.sendEmail("kostasorfeasamc@gmail.com", text, "Candidate Checked");
                    if (temp.email.length() > 0) {
                        String phone = "";
                        if (temp.businessNumber.trim().length() > 0 && temp.residenceNumber.trim().length() > 0) {
                            phone += "Business Number: " + temp.businessNumber + " or to Residence Number: " + temp.residenceNumber;
                        } else if (temp.businessNumber.trim().length() > 0) {
                            phone += "Business Number: " + temp.businessNumber;
                        } else if (temp.residenceNumber.trim().length() > 0) {
                            phone += "Residence Number: " + temp.residenceNumber;
                        }
                        text = "Dear " + temp.name + ",\n\nAfter we check your information through PEC Company we would like to make you an interview\n"
                                + "We will call you to " + phone;
                        helper.sendEmail(temp.email, text, companyModel.name + " - Interview");
                    }
                } catch (MessagingException ex) {
                    Logger.getLogger(CandidateDetails.class.getName()).log(Level.SEVERE, null, ex);
                }
                tabbedPane.setTitleAt(0, "Your Job Requests (" + jobOrderModel.size() + ")");
                setCandidateDataToTable();
                JOptionPane.showMessageDialog(getContentPane(),
                        response);
            }
            waiting = false;
            tabbedPane.setEnabled(true);
            deleteCandidateButton.setEnabled(true);
            checkButton.setEnabled(true);
            detailsCandidateButton.setEnabled(true);
            searchCandidateText.setEnabled(true);
            searchCandidateComboBox.setEnabled(true);
            setCursor(Cursor.DEFAULT_CURSOR);
            candidateTable.getTableHeader().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    class ProgressDeleteTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            setCursor(Cursor.WAIT_CURSOR);
            tabbedPane.setEnabled(false);
            checkButton.setEnabled(false);
            detailsCandidateButton.setEnabled(false);
            deleteCandidateButton.setEnabled(false);
            searchCandidateText.setEnabled(false);
            searchCandidateComboBox.setEnabled(false);
            waiting = true;
            String url = helper.getDomainName() + "deleteCandidateFound.php";
            String urlParameters = "candidateId=" + searchCandidateModel.get(candidateTable.getSelectedRow()).candidateId + "&clientId=" + companyModel.id;
            String response = helper.postMethod(url, urlParameters);
            if (response.charAt(0) == 'A') {
                JOptionPane.showMessageDialog(getContentPane(),
                        response,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                int index = helper.getCandidateModelIndex(searchCandidateModel.get(candidateTable.getSelectedRow()).candidateId, candidatesModel);
                candidatesModel.remove(index);
                setCandidateDataToTable();
                JOptionPane.showMessageDialog(getContentPane(),
                        response);
            }
            waiting = false;
            tabbedPane.setEnabled(true);
            checkButton.setEnabled(true);
            deleteCandidateButton.setEnabled(true);
            detailsCandidateButton.setEnabled(true);
            searchCandidateText.setEnabled(true);
            searchCandidateComboBox.setEnabled(true);
            setCursor(Cursor.DEFAULT_CURSOR);
            candidateTable.getTableHeader().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    class ProgressInsertTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            double salary, placementFee;
            int i;
            if (textFields[4].getText().trim().length() == 0) {
                salary = 0;
            } else {
                salary = Double.parseDouble(textFields[4].getText().trim().replace(",", "."));
            }
            if (textFields[8].getText().trim().length() == 0) {
                placementFee = 0;
            } else {
                placementFee = Double.parseDouble(textFields[8].getText().trim().replace(",", "."));
            }
            setCursor(Cursor.WAIT_CURSOR);
            tabbedPane.setEnabled(false);
            insertButton.setEnabled(false);
            waiting = true;
            String parameterFields[] = {"contactName", "department", "billingContact", "phone", "salary", "startingDate", "address", "businessType",
                "placementFee", "placementDate", "actualStartingDate", "newPosition", "educationalRequirements", "experienceRequirements", "duties", "bonuses", "travelRequirements", "car",
                "careerOpportunities", "interview", "orderTaker", "counselorUltimatePlacement"};
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDateTime now = LocalDateTime.now();
            String urlParameters = "position=" + companyModel.position + "&dateInserted=" + dtf.format(now);
            for (i = 0; i < fieldsLength; i++) {
                if (i < 11) {
                    textFields[i].setEnabled(false);
                    if (i == 4 || i == 8) {
                        urlParameters += "&" + parameterFields[i] + "=" + textFields[i].getText().trim().replace(",", ".");
                    } else {
                        urlParameters += "&" + parameterFields[i] + "=" + textFields[i].getText().trim();
                    }
                } else if (i == 11) {
                    newPositionComboBox.setEnabled(false);
                    urlParameters += "&" + parameterFields[i] + "=" + newPositionComboBox.getSelectedItem();
                } else {
                    textAreas[i - 12].setEnabled(false);
                    urlParameters += "&" + parameterFields[i] + "=" + textAreas[i - 12].getText().trim().replaceAll("\\n", "@");
                }
            }
            String url = helper.getDomainName() + "insertJob.php";
            companyModel.maxInvoiceNo++;
            urlParameters += "&invoiceNo=" + companyModel.maxInvoiceNo + "&firm=" + companyModel.name + "&clientId=" + companyModel.id;
            String response = helper.postMethod(url, urlParameters);
            if (response.charAt(0) == 'A') {
                JOptionPane.showMessageDialog(getContentPane(),
                        response,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                for (i = 0; i < fieldsLength; i++) {
                    if (i < 11) {
                        textFields[i].setEnabled(true);
                        if (i == 5 || i == 6 || i == 9 || i == 10) {
                            textFields[i].setEnabled(false);
                        }
                    } else if (i == 11) {
                        newPositionComboBox.setEnabled(true);
                    } else {
                        textAreas[i - 12].setEnabled(true);
                    }
                }
            } else {
                JobOrderModel temp = new JobOrderModel();
                temp.jobOrderId = Long.parseLong(response);
                temp.position = companyModel.position;
                temp.dateInserted = dtf.format(now);
                temp.contactName = textFields[0].getText().trim();
                temp.department = textFields[1].getText().trim();
                temp.billingContact = textFields[2].getText().trim();
                temp.phone = textFields[3].getText().trim();
                temp.salary = salary;
                temp.startingDate = textFields[5].getText().trim();
                temp.address = textFields[6].getText().trim();
                temp.businessType = textFields[7].getText().trim();
                temp.placementFee = placementFee;
                temp.placementDate = textFields[9].getText().trim();
                temp.actualStartingDate = textFields[10].getText().trim();
                temp.newPosition = newPositionComboBox.getSelectedItem().toString();
                temp.educationalRequirements = textAreas[0].getText().trim().replaceAll("\\n", "@");
                temp.experienceRequirements = textAreas[1].getText().trim().replaceAll("\\n", "@");
                temp.duties = textAreas[2].getText().trim().replaceAll("\\n", "@");
                temp.bonuses = textAreas[3].getText().trim().replaceAll("\\n", "@");
                temp.travelRequirements = textAreas[4].getText().trim().replaceAll("\\n", "@");
                temp.car = textAreas[5].getText().trim().replaceAll("\\n", "@");
                temp.careerOpportunities = textAreas[6].getText().trim().replaceAll("\\n", "@");
                temp.interview = textAreas[7].getText().trim().replaceAll("\\n", "@");
                temp.orderTaker = textAreas[8].getText().trim().replaceAll("\\n", "@");
                temp.counselorUltimate = textAreas[9].getText().trim().replaceAll("\\n", "@");
                temp.invoiceNo = companyModel.maxInvoiceNo;
                jobOrderModel.add(0, temp);
                tabbedPane.setTitleAt(0, "Your Job Requests (" + jobOrderModel.size() + ")");
                setJobDataToTable();
                JOptionPane.showMessageDialog(getContentPane(),
                        "Your job request has been inserted successfully!");
                for (i = 0; i < fieldsLength; i++) {
                    if (i < 11) {
                        textFields[i].setEnabled(true);
                        if (i != 6) {
                            textFields[i].setText("");
                        }
                        if (i == 5 || i == 6 || i == 9 || i == 10) {
                            textFields[i].setEnabled(false);
                        }
                    } else if (i == 11) {
                        newPositionComboBox.setEnabled(true);
                        newPositionComboBox.setSelectedIndex(0);
                    } else {
                        textAreas[i - 12].setEnabled(true);
                        textAreas[i - 12].setText("");
                    }
                }
                jsp.getVerticalScrollBar().setValue(0);
                jsp.getHorizontalScrollBar().setValue(0);
            }
            waiting = false;
            tabbedPane.setEnabled(true);
            insertButton.setEnabled(true);
            setCursor(Cursor.DEFAULT_CURSOR);
            candidateTable.getTableHeader().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    class ProgressRefreshTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            waiting = true;
            setCursor(Cursor.WAIT_CURSOR);
            tabbedPane.setEnabled(false);
            if (refresh == 1) {
                detailsJobButton.setEnabled(false);
                cancelButton.setEnabled(false);
                searchRequestText.setEnabled(false);
                searchRequestComboBox.setEnabled(false);
            } else {
                detailsCandidateButton.setEnabled(false);
                checkButton.setEnabled(false);
                searchCandidateText.setEnabled(false);
                searchCandidateComboBox.setEnabled(false);
            }
            String urlString = helper.getDomainName() + "clientsJobOrders.php?id=" + companyModel.id;
            ArrayList<JobOrderModel> jobOrderRefreshedModel = helper.getJobOrders(urlString);
            urlString = helper.getDomainName() + "candidatesFound.php?id=" + companyModel.id;
            ArrayList<CandidateModel> candidatesRefreshedModel = helper.getCandidates(urlString);
            urlString = helper.getDomainName() + "candidatesResumes.php?id=" + companyModel.id;
            resumesModel = helper.getResumes(urlString);
            int refreshedData = candidatesRefreshedModel.size() - candidatesModel.size();
            jobOrderModel = jobOrderRefreshedModel;
            candidatesModel = candidatesRefreshedModel;
            waiting = false;
            setCursor(Cursor.DEFAULT_CURSOR);
            tabbedPane.setEnabled(true);
            if (refresh == 1) {
                detailsJobButton.setEnabled(true);
                cancelButton.setEnabled(true);
                searchRequestText.setEnabled(true);
                searchRequestComboBox.setEnabled(true);
                searchRequestComboBox.setSelectedIndex(0);
                requestScrollPane.getVerticalScrollBar().setValue(0);
                requestScrollPane.getHorizontalScrollBar().setValue(0);
            } else {
                detailsCandidateButton.setEnabled(true);
                checkButton.setEnabled(true);
                searchCandidateText.setEnabled(true);
                searchCandidateComboBox.setEnabled(true);
                searchCandidateComboBox.setSelectedIndex(0);
                candidateScrollPane.getVerticalScrollBar().setValue(0);
                candidateScrollPane.getHorizontalScrollBar().setValue(0);

            }
            String msg = "";
            if (refreshedData == 0) {
                msg = "No new candidates found yet!";
            } else {
                if (refresh == 1) {
                    setJobDataToTable();
                    tabbedPane.setTitleAt(1, "Candidates Found (" + candidatesModel.size() + ")");
                } else {
                    setCandidateDataToTable();
                    tabbedPane.setTitleAt(0, "Your Job Requests (" + jobOrderModel.size() + ")");
                }
                msg = refreshedData + " new candidates found.\nCheck your email for further information.";
            }
            JOptionPane.showMessageDialog(getContentPane(),
                    msg);
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
