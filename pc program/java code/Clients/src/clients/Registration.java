/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clients;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.SQLException;
import javax.mail.MessagingException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 *  
 */
public class Registration extends javax.swing.JFrame {

    private Helper helper;
    private ProgressTask progressTask;
    private boolean waiting = false;

    /**
     * Creates new form Register
     */
    public Registration() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        userText = new javax.swing.JTextField();
        passLabel = new javax.swing.JLabel();
        confPassLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        emailText = new javax.swing.JTextField();
        registerButton = new javax.swing.JButton();
        backLabel = new javax.swing.JLabel();
        confPassText = new javax.swing.JPasswordField();
        passText = new javax.swing.JPasswordField();
        positionLabel = new javax.swing.JLabel();
        positionText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registration");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameLabel.setText("Company Name :");
        getContentPane().add(nameLabel);
        nameLabel.setBounds(130, 40, 100, 30);

        userLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        userLabel.setText("Username :");
        getContentPane().add(userLabel);
        userLabel.setBounds(130, 130, 80, 30);
        getContentPane().add(nameText);
        nameText.setBounds(240, 50, 140, 20);
        getContentPane().add(userText);
        userText.setBounds(240, 140, 140, 20);

        passLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        passLabel.setText("Password : ");
        getContentPane().add(passLabel);
        passLabel.setBounds(130, 180, 90, 14);

        confPassLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        confPassLabel.setText("Retype Password :");
        getContentPane().add(confPassLabel);
        confPassLabel.setBounds(90, 230, 110, 20);

        emailLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        emailLabel.setText("Email : ");
        getContentPane().add(emailLabel);
        emailLabel.setBounds(130, 290, 80, 20);
        getContentPane().add(emailText);
        emailText.setBounds(240, 290, 140, 20);

        registerButton.setText("Register");
        registerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                registerButtonMouseReleased(evt);
            }
        });
        getContentPane().add(registerButton);
        registerButton.setBounds(250, 370, 120, 30);

        backLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                backLabelMouseReleased(evt);
            }
        });
        getContentPane().add(backLabel);
        backLabel.setBounds(490, 80, 60, 30);
        getContentPane().add(confPassText);
        confPassText.setBounds(240, 230, 140, 20);
        getContentPane().add(passText);
        passText.setBounds(240, 180, 140, 20);

        positionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        positionLabel.setText("Position :");
        getContentPane().add(positionLabel);
        positionLabel.setBounds(150, 100, 70, 14);
        getContentPane().add(positionText);
        positionText.setBounds(240, 100, 150, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int width = (int) screenSize.getWidth();
        int height = (int) screenSize.getHeight();
        getContentPane().setBackground(Color.GRAY);
        helper = new Helper();

        //size and location of window opened
        setSize(width * 32 / 100, height * 68 / 100);
        setLocationRelativeTo(null);

        //initialize components   
        ImageIcon imageIcon = new ImageIcon(getClass().getResource("/img/back.png"));
        Image image = imageIcon.getImage();
        Image newimg = image.getScaledInstance(width * 3 / 100, height * 2 / 100, java.awt.Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newimg);

        backLabel.setSize(width * 3 / 100, height * 2 / 100);
        backLabel.setLocation(width * 2 / 100, height * 2 / 100);
        backLabel.setIcon(imageIcon);

        Font currentFont = nameLabel.getFont();
        nameLabel.setSize(width * 15 / 100, height * 5 / 100);
        nameLabel.setLocation(width * -2 / 100, height * 7 / 100);
        nameLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
        nameText.setSize(width * 10 / 100, height * 4 / 100);
        nameText.setLocation(width * 15 / 100, height * 8 / 100);

        positionLabel.setSize(width * 15 / 100, height * 5 / 100);
        positionLabel.setLocation(width * -2 / 100, height * 14 / 100);
        positionLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
        positionText.setSize(width * 10 / 100, height * 4 / 100);
        positionText.setLocation(width * 15 / 100, height * 15 / 100);

        userLabel.setSize(width * 15 / 100, height * 5 / 100);
        userLabel.setLocation(width * -2 / 100, height * 21 / 100);
        userLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
        userText.setSize(width * 10 / 100, height * 4 / 100);
        userText.setLocation(width * 15 / 100, height * 22 / 100);

        passLabel.setSize(width * 15 / 100, height * 5 / 100);
        passLabel.setLocation(width * -2 / 100, height * 28 / 100);
        passLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
        passText.setSize(width * 10 / 100, height * 4 / 100);
        passText.setLocation(width * 15 / 100, height * 29 / 100);

        confPassLabel.setSize(width * 15 / 100, height * 5 / 100);
        confPassLabel.setLocation(width * -2 / 100, height * 35 / 100);
        confPassLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
        confPassText.setSize(width * 10 / 100, height * 4 / 100);
        confPassText.setLocation(width * 15 / 100, height * 36 / 100);

        emailLabel.setSize(width * 15 / 100, height * 5 / 100);
        emailLabel.setLocation(width * -2 / 100, height * 42 / 100);
        emailLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
        emailText.setSize(width * 10 / 100, height * 4 / 100);
        emailText.setLocation(width * 15 / 100, height * 43 / 100);

        registerButton.setSize(width * 8 / 100, height * 5 / 100);
        registerButton.setLocation(width * 16 / 100, height * 53 / 100);
        registerButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
    }//GEN-LAST:event_formWindowOpened

    private void backLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backLabelMouseReleased
        if (!waiting) {
            new Main().setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_backLabelMouseReleased

    private void registerButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerButtonMouseReleased
        if (registerButton.isEnabled()) {
            if (!helper.isConnected()) {
                JOptionPane.showMessageDialog(this,
                        "Please check your internet connection!",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                if (nameText.getText().trim().length() == 0 || positionText.getText().trim().length() == 0 || userText.getText().trim().length() == 0 || passText.getText().trim().length() == 0 || confPassText.getText().trim().length() == 0 || emailText.getText().trim().length() == 0) {
                    JOptionPane.showMessageDialog(this,
                            "No empty fields allowed!",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                } else if (!helper.fieldValidity(nameText.getText()) || !helper.fieldValidity(positionText.getText()) || !helper.fieldValidity(userText.getText()) || !helper.fieldValidity(passText.getText()) || !helper.fieldValidity(confPassText.getText())) {
                    JOptionPane.showMessageDialog(this,
                            "Invalid fields!",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    if (!passText.getText().trim().equals(confPassText.getText().trim())) {
                        JOptionPane.showMessageDialog(this,
                                "Passwords don't match!",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    } else if (!helper.emailValidity(emailText.getText().trim())) {
                        JOptionPane.showMessageDialog(this,
                                "Please enter a valid Email!",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    } else {
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to register?", "Confirmation", dialogButton);
                        if (dialogResult == JOptionPane.YES_OPTION) {
                            setCursor(Cursor.WAIT_CURSOR);
                            progressTask = new Registration.ProgressTask();
                            progressTask.execute();

                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_registerButtonMouseReleased

    class ProgressTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException, MessagingException {
            waiting = true;
            nameText.setEnabled(false);
            positionText.setEnabled(false);
            userText.setEnabled(false);
            passText.setEnabled(false);
            confPassText.setEnabled(false);
            emailText.setEnabled(false);
            registerButton.setEnabled(false);
            String urlString = helper.getDomainName() + "checkClientsRegistration.php?company=" + nameText.getText().trim() + "&user=" + userText.getText().trim() + "&email=" + emailText.getText().trim();
            String result = helper.getMethod(urlString);
            if (result.trim().equals("Ok")) {
                urlString = helper.getDomainName() + "registerClient.php?company=" + nameText.getText().trim() + "&position=" + positionText.getText().trim() + "&user=" + userText.getText().trim() + "&pass=" + passText.getText().trim() + "&email=" + emailText.getText().trim();
                String text = "Dear Sir,<br><br> Click <a href = '" + urlString + "' >here</a> for activation";
                helper.sendEmail(emailText.getText().trim(), text, "PEC - Account Activation");
                JOptionPane.showMessageDialog(getContentPane(),
                        "Check your email for activation!");
                new Main().setVisible(true);
                dispose();
            } else {
                waiting = false;
                nameText.setEnabled(true);
                positionText.setEnabled(true);
                userText.setEnabled(true);
                passText.setEnabled(true);
                confPassText.setEnabled(true);
                emailText.setEnabled(true);
                registerButton.setEnabled(true);
                setCursor(Cursor.DEFAULT_CURSOR);
                JOptionPane.showMessageDialog(getContentPane(),
                        result,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
            return null;
        }

        /*
     * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backLabel;
    private javax.swing.JLabel confPassLabel;
    private javax.swing.JPasswordField confPassText;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailText;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel passLabel;
    private javax.swing.JPasswordField passText;
    private javax.swing.JLabel positionLabel;
    private javax.swing.JTextField positionText;
    private javax.swing.JButton registerButton;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userText;
    // End of variables declaration//GEN-END:variables
}
