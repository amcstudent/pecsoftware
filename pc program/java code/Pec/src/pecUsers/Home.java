/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pecUsers;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 *
 */
public class Home extends javax.swing.JFrame implements ChangeListener {

    private ArrayList<JobOrderModel> currentModel, pendingModel, cancelledModel, searchJobModel, waitingModel;
    private ArrayList<CandidateModel> candidatesModel, searchCandidateModel, candidatesFoundModel;
    private ArrayList<ResumeModel> resumesModel;
    private DefaultTableModel jobTableModel, candidateTableModel;
    private int jobComboSelectedIndex = 0, refresh, searchJobSatusComboSelectedIndex = 0, buttonClicked = 0, searchCandidateComboSelectedIndex, fieldsLength, prevSelectedTabIndex = 0, width, height;
    private String username;
    private Helper helper;
    private ProgressTaskJob progressTaskJob;
    private ProgressRefreshTask progressRefreshTask;
    private ProgressInsertTask progressInsertTask;
    private ProgressDeleteTask progressDeleteTask;
    private ProgressGetCandidatesTask progressGetCandidatesTask;
    private JTextField searchJobText, searchCandidateText;
    private JButton detailsJobButton, pendingJobButton, deleteJobButton, foundJobButton, insertButton, detailsCandidateButton, deleteCandidateButton, resumeCandidateButton;
    private JComboBox jobsComboBox, searchJobSatusComboBox, searchCandidateComboBox;
    private JTable jobTable, candidateTable;
    private JScrollPane jobScrollPane, jsp, candidateScrollPane;
    private boolean tabbedPaneCreated = false, waiting = false;
    private JComboBox[] comboBoxes;
    private JSpinner spinner;
    private JTextField[] textFields;
    private JTextArea[] textAreas;
    private JSpinner.DefaultEditor spinnerEditor;
    private long[] candidateIds;
    private String[] candidateNames;

    /**
     * Creates new form Home
     */
    public Home(String username, ArrayList<JobOrderModel> currentModel, ArrayList<JobOrderModel> pendingModel, ArrayList<JobOrderModel> cancelledModel, ArrayList<JobOrderModel> waitingModel, ArrayList<CandidateModel> candidatesModel, ArrayList<CandidateModel> candidatesFoundModel, ArrayList<ResumeModel> resumesModel) {
        this.username = username;
        this.currentModel = currentModel;
        this.pendingModel = pendingModel;
        this.cancelledModel = cancelledModel;
        this.waitingModel = waitingModel;
        this.candidatesModel = candidatesModel;
        this.candidatesFoundModel = candidatesFoundModel;
        this.resumesModel = resumesModel;
        initComponents();
    }

    Home() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);
        getContentPane().add(tabbedPane);
        tabbedPane.setBounds(590, 290, 150, 90);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        width = (int) screenSize.getWidth();
        height = (int) screenSize.getHeight();
        getContentPane().setBackground(Color.GRAY);
        helper = new Helper();

        //size and location of window opened
        setSize(width, height * 92 / 100);
        setLocationRelativeTo(null);

        //initialize components
        tabbedPane.setSize(width, height * 92 / 100);
        tabbedPane.setLocation(0, 0);
        tabbedPane.addChangeListener(this);
        JComponent panel1 = (JComponent) createTabPanel(0);
        tabbedPane.addTab("Job Requests (" + currentModel.size() + ")", null, panel1, "You can manage current, pending and cancelled job requests.");

        JComponent panel2 = (JComponent) createTabPanel(1);
        tabbedPane.addTab("Candidates (" + candidatesModel.size() + ")", null, panel2, "You can manage the candidates.");

        JComponent panel3 = (JComponent) createTabPanel(2);
        tabbedPane.addTab("Insert Candidate", null, panel3, "You can insert new candidate.");
        tabbedPaneCreated = true;
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        helper.writeToFile(username + " logged out");
    }//GEN-LAST:event_formWindowClosing

    protected Component createTabPanel(int index) {
        JPanel panel = new JPanel();
        panel.setLayout(null);
        panel.setBackground(Color.GRAY);
        if (index == 0) {
            String columns[] = {"Date", "InvoiceNo", "Company", "Contact Name", "Phone", "Status"};
            String searchBy[] = {"Date", "InvoiceNo", "Company"};
            String searchByJobStatus[] = {"Current", "Pending", "Cancelled", "Waiting"};

            ImageIcon imageIcon = new ImageIcon(getClass().getResource("/img/refresh.png"));
            Image image = imageIcon.getImage();
            Image newimg = image.getScaledInstance(width * 2 / 100, height * 3 / 100, java.awt.Image.SCALE_SMOOTH);
            imageIcon = new ImageIcon(newimg);

            JLabel refreshLabel = new JLabel();
            refreshLabel.setSize(width * 2 / 100, height * 3 / 100);
            refreshLabel.setLocation(width * 2 / 100, height * 4 / 100);
            refreshLabel.setIcon(imageIcon);
            refreshLabel.addMouseListener(new MouseAdapter() {

                public void mouseClicked(MouseEvent e) {
                    if (!waiting) {
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to refresh data?", "Confirmation", dialogButton);
                        if (dialogResult == JOptionPane.YES_OPTION) {
                            refresh = 1;
                            progressRefreshTask = new ProgressRefreshTask();
                            progressRefreshTask.execute();
                        }
                    }
                }
            });
            panel.add(refreshLabel);

            JLabel searchLabel = new JLabel("Search :");
            Font currentFont = searchLabel.getFont();
            searchLabel.setSize(width * 10 / 100, height * 3 / 100);
            searchLabel.setLocation(width * 3 / 100, height * 15 / 100);
            searchLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
            panel.add(searchLabel);

            searchJobText = new JTextField();
            searchJobText.setSize(width * 10 / 100, height * 4 / 100);
            searchJobText.setLocation(width * 10 / 100, height * 15 / 100);
            searchJobText.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
            searchJobText.addKeyListener(new KeyAdapter() {
                public void keyReleased(KeyEvent e) {
                    setJobDataToTable();
                }
            });
            panel.add(searchJobText);

            detailsJobButton = new JButton("Details");
            detailsJobButton.setSize(width * 10 / 100, height * 5 / 100);
            detailsJobButton.setLocation(width * 48 / 100, height * 3 / 100);
            detailsJobButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            detailsJobButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (detailsJobButton.isEnabled()) {
                        if (searchJobModel.size() > 0) {
                            if (jobTable.getSelectedRowCount() != 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "You must choose only one job order!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                int dialogButton = JOptionPane.YES_NO_OPTION;
                                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to see details about the selected job request?", "Confirmation", dialogButton);
                                if (dialogResult == JOptionPane.YES_OPTION) {
                                    JobOrderModel temp = searchJobModel.get(jobTable.getSelectedRow());
                                    JobDetails details = new JobDetails(username, temp, currentModel, pendingModel, cancelledModel, waitingModel, candidatesModel, candidatesFoundModel, resumesModel, searchJobSatusComboSelectedIndex);
                                    details.main(null);
                                    if (temp.candidateId > 0) {
                                        CandidateModel _temp = new CandidateModel();
                                        for (JobOrderModel jobItem : waitingModel) {
                                            for (CandidateModel candidateItem : candidatesFoundModel) {
                                                if (jobItem.candidateId == candidateItem.candidateId) {
                                                    _temp = candidateItem;
                                                }
                                            }
                                        }
                                        CandidateDetails _details = new CandidateDetails(username, _temp, currentModel, pendingModel, cancelledModel, waitingModel, candidatesModel, candidatesFoundModel, resumesModel, 1);
                                        _details.main(null);
                                    }
                                    helper.writeToFile(username + " saw details about jobOrderId: " + temp.jobOrderId);
                                    dispose();
                                }
                            }
                        }
                    }
                }
            });
            panel.add(detailsJobButton);

            pendingJobButton = new JButton("Pending");
            pendingJobButton.setSize(width * 10 / 100, height * 5 / 100);
            pendingJobButton.setLocation(width * 61 / 100, height * 3 / 100);
            pendingJobButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            pendingJobButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (pendingJobButton.isEnabled()) {
                        if (searchJobModel.size() > 0) {
                            if (!helper.isConnected()) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "Please check your internet connection!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                if (jobTable.getSelectedRowCount() != 1) {
                                    JOptionPane.showMessageDialog(getContentPane(),
                                            "You must choose only one job order!",
                                            "Error",
                                            JOptionPane.ERROR_MESSAGE);
                                } else {
                                    int dialogButton = JOptionPane.YES_NO_OPTION;
                                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to put the selected job request to pending list?", "Confirmation", dialogButton);
                                    if (dialogResult == JOptionPane.YES_OPTION) {
                                        buttonClicked = 1;
                                        progressTaskJob = new ProgressTaskJob();
                                        progressTaskJob.execute();
                                    }
                                }
                            }
                        }
                    }
                }
            });
            panel.add(pendingJobButton);

            foundJobButton = new JButton("Found");
            foundJobButton.setSize(width * 10 / 100, height * 5 / 100);
            foundJobButton.setLocation(width * 74 / 100, height * 3 / 100);
            foundJobButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            foundJobButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (foundJobButton.isEnabled()) {
                        if (searchJobModel.size() > 0) {
                            if (!helper.isConnected()) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "Please check your internet connection!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else if (jobTable.getSelectedRowCount() != 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "You must choose only one candidate!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                progressGetCandidatesTask = new ProgressGetCandidatesTask();
                                progressGetCandidatesTask.execute();
                            }
                        }
                    }
                }
            }
            );
            panel.add(foundJobButton);

            deleteJobButton = new JButton("Delete");
            deleteJobButton.setSize(width * 10 / 100, height * 5 / 100);
            deleteJobButton.setLocation(width * 87 / 100, height * 3 / 100);
            deleteJobButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            deleteJobButton.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (deleteJobButton.isEnabled()) {
                        if (searchJobModel.size() > 0) {
                            if (!helper.isConnected()) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "Please check your internet connection!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                if (jobTable.getSelectedRowCount() != 1) {
                                    JOptionPane.showMessageDialog(getContentPane(),
                                            "You must choose only one job order!",
                                            "Error",
                                            JOptionPane.ERROR_MESSAGE);
                                } else {
                                    int dialogButton = JOptionPane.YES_NO_OPTION;
                                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the selected job request?", "Confirmation", dialogButton);
                                    if (dialogResult == JOptionPane.YES_OPTION) {
                                        buttonClicked = 3;
                                        progressTaskJob = new Home.ProgressTaskJob();
                                        progressTaskJob.execute();
                                    }
                                }
                            }
                        }
                    }
                }
            });
            panel.add(deleteJobButton);

            jobsComboBox = new JComboBox(searchBy);
            jobsComboBox.setSize(width * 10 / 100, height * 4 / 100);
            jobsComboBox.setLocation(width * 22 / 100, height * 15 / 100);
            jobsComboBox.addItemListener(new ItemListener() {
                public void itemStateChanged(ItemEvent evt) {
                    if (evt.getStateChange() == evt.SELECTED) {
                        jobComboSelectedIndex = jobsComboBox.getSelectedIndex();
                        setJobDataToTable();
                    }
                }
            });
            panel.add(jobsComboBox);

            searchJobSatusComboBox = new JComboBox(searchByJobStatus);
            searchJobSatusComboBox.setSize(width * 10 / 100, height * 4 / 100);
            searchJobSatusComboBox.setLocation(width * 10 / 100, height * 6 / 100);
            searchJobSatusComboBox.addItemListener(new ItemListener() {
                public void itemStateChanged(ItemEvent evt) {
                    if (evt.getStateChange() == evt.SELECTED) {
                        foundJobButton.setEnabled(true);
                        searchJobSatusComboSelectedIndex = searchJobSatusComboBox.getSelectedIndex();
                        if (searchJobSatusComboSelectedIndex == 0) {
                            pendingJobButton.setEnabled(true);
                        } else {
                            pendingJobButton.setEnabled(false);
                            if (searchJobSatusComboSelectedIndex == 2) {
                                foundJobButton.setEnabled(false);
                            }
                        }
                        setJobDataToTable();
                    }
                }
            });
            panel.add(searchJobSatusComboBox);

            jobTable = new JTable();
            jobScrollPane = new JScrollPane(jobTable);
            jobTable.setFillsViewportHeight(true);
            jobTable.setDefaultRenderer(Object.class, new MyTableCellRender());
            jobTableModel = (DefaultTableModel) jobTable.getModel();
            for (int i = 0; i < columns.length; i++) {
                jobTableModel.addColumn(columns[i]);
            }
            jobTable.setRowHeight(height * 5 / 100);
            jobTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 18));
            jobTable.setShowGrid(true);
            jobTable.setBackground(new Color(204, 204, 204));
            jobTable.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    if (searchJobSatusComboSelectedIndex == 3 && !waiting) {
                        if (waitingModel.get(jobTable.getSelectedRow()).status.equals("found")) {
                            foundJobButton.setEnabled(false);
                        } else {
                            foundJobButton.setEnabled(true);
                        }
                    }
                }
            });
            jobScrollPane.setLocation(width * 1 / 100, height * 22 / 100);
            jobScrollPane.setSize(width * 98 / 100, height * 64 / 100);
            panel.add(jobScrollPane);
            setJobDataToTable();
        } else if (index == 1) {
            String columns[] = {"Name", "Address", "Residence Number", "Business Number"};
            String searchBy[] = {"Name", "Address"};

            ImageIcon imageIcon = new ImageIcon(getClass().getResource("/img/refresh.png"));
            Image image = imageIcon.getImage();
            Image newimg = image.getScaledInstance(width * 2 / 100, height * 3 / 100, java.awt.Image.SCALE_SMOOTH);
            imageIcon = new ImageIcon(newimg);

            JLabel refreshLabel = new JLabel();
            refreshLabel.setSize(width * 2 / 100, height * 3 / 100);
            refreshLabel.setLocation(width * 2 / 100, height * 4 / 100);
            refreshLabel.setIcon(imageIcon);
            refreshLabel.addMouseListener(new MouseAdapter() {

                public void mouseClicked(MouseEvent e) {
                    if (!waiting) {
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to refresh data?", "Confirmation", dialogButton);
                        if (dialogResult == JOptionPane.YES_OPTION) {
                            refresh = 2;
                            progressRefreshTask = new ProgressRefreshTask();
                            progressRefreshTask.execute();
                        }
                    }
                }
            });
            panel.add(refreshLabel);

            JLabel searchLabel = new JLabel("Search :");
            Font currentFont = searchLabel.getFont();
            searchLabel.setSize(width * 10 / 100, height * 3 / 100);
            searchLabel.setLocation(width * 8 / 100, height * 8 / 100);
            searchLabel.setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
            panel.add(searchLabel);

            searchCandidateText = new JTextField();
            searchCandidateText.setSize(width * 10 / 100, height * 4 / 100);
            searchCandidateText.setLocation(width * 15 / 100, height * 8 / 100);
            searchCandidateText.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
            searchCandidateText.addKeyListener(new KeyAdapter() {
                public void keyReleased(KeyEvent e) {
                    setCandidateDataToTable();
                }
            });
            panel.add(searchCandidateText);

            detailsCandidateButton = new JButton("Details");
            detailsCandidateButton.setSize(width * 13 / 100, height * 5 / 100);
            detailsCandidateButton.setLocation(width * 50 / 100, height * 7 / 100);
            detailsCandidateButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            detailsCandidateButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (detailsCandidateButton.isEnabled()) {
                        if (candidateTable.getRowCount() > 0) {
                            if (candidateTable.getSelectedRowCount() != 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "You must choose only one candidate!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                int dialogButton = JOptionPane.YES_NO_OPTION;
                                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to see details about the selected candidate?", "Confirmation", dialogButton);
                                if (dialogResult == JOptionPane.YES_OPTION) {
                                    CandidateModel temp = searchCandidateModel.get(candidateTable.getSelectedRow());
                                    CandidateDetails details = new CandidateDetails(username, temp, currentModel, pendingModel, cancelledModel, waitingModel, candidatesModel, candidatesFoundModel, resumesModel, 0);
                                    details.main(null);
                                    int found = 0;
                                    ResumeModel _temp = new ResumeModel();
                                    for (ResumeModel item : resumesModel) {
                                        if (item.candidateId == temp.candidateId) {
                                            found = 1;
                                            _temp = item;
                                            break;
                                        }
                                    }
                                    if (found == 1) {
                                        ResumeFrame resumeFrame = new ResumeFrame(username, _temp, currentModel, pendingModel, cancelledModel, waitingModel, candidatesModel, candidatesFoundModel, resumesModel, 'U', 2);
                                        resumeFrame.main(null);
                                    }
                                    dispose();
                                }
                            }
                        }
                    }
                }
            });
            panel.add(detailsCandidateButton);

            resumeCandidateButton = new JButton("Resume");
            resumeCandidateButton.setSize(width * 13 / 100, height * 5 / 100);
            resumeCandidateButton.setLocation(width * 65 / 100, height * 7 / 100);
            resumeCandidateButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            resumeCandidateButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (resumeCandidateButton.isEnabled()) {
                        if (candidateTable.getRowCount() > 0) {
                            if (candidateTable.getSelectedRowCount() != 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "You must choose only one candidate!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                int dialogButton = JOptionPane.YES_NO_OPTION;
                                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirmation", dialogButton);
                                if (dialogResult == JOptionPane.YES_OPTION) {
                                    JButton button;
                                    button = (JButton) e.getSource();
                                    ResumeModel temp = new ResumeModel();
                                    if (resumesModel.size() > 0) {
                                        for (ResumeModel item : resumesModel) {
                                            if (item.candidateId == searchCandidateModel.get(candidateTable.getSelectedRow()).candidateId) {
                                                temp = item;
                                                break;
                                            }
                                        }
                                    }
                                    if (temp.candidateId == 0) {
                                        temp.candidateId = searchCandidateModel.get(candidateTable.getSelectedRow()).candidateId;
                                    }
                                    ResumeFrame resumeFrame = new ResumeFrame(username, temp, currentModel, pendingModel, cancelledModel, waitingModel, candidatesModel, candidatesFoundModel, resumesModel, button.getText().charAt(0), 3);
                                    resumeFrame.main(null);
                                    dispose();
                                }
                            }
                        }
                    }
                }
            });
            panel.add(resumeCandidateButton);

            deleteCandidateButton = new JButton("Delete");
            deleteCandidateButton.setSize(width * 13 / 100, height * 5 / 100);
            deleteCandidateButton.setLocation(width * 80 / 100, height * 7 / 100);
            deleteCandidateButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            deleteCandidateButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (deleteCandidateButton.isEnabled()) {
                        if (candidateTable.getRowCount() > 0) {
                            if (!helper.isConnected()) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "Please check your internet connection!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else if (candidateTable.getSelectedRowCount() != 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "You must choose only one candidate!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                int dialogButton = JOptionPane.YES_NO_OPTION;
                                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirmation", dialogButton);
                                if (dialogResult == JOptionPane.YES_OPTION) {
                                    progressDeleteTask = new ProgressDeleteTask();
                                    progressDeleteTask.execute();
                                }
                            }
                        }
                    }
                }
            });
            panel.add(deleteCandidateButton);

            searchCandidateComboBox = new JComboBox(searchBy);
            searchCandidateComboBox.setSize(width * 10 / 100, height * 4 / 100);
            searchCandidateComboBox.setLocation(width * 28 / 100, height * 8 / 100);
            searchCandidateComboBox.addItemListener(new ItemListener() {
                public void itemStateChanged(ItemEvent evt) {
                    if (evt.getStateChange() == evt.SELECTED) {
                        searchCandidateComboSelectedIndex = searchCandidateComboBox.getSelectedIndex();
                        setCandidateDataToTable();
                    }
                }
            });
            panel.add(searchCandidateComboBox);

            candidateTable = new JTable();
            candidateTable.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    int found = 0;
                    if (resumesModel.size() > 0) {
                        for (ResumeModel item : resumesModel) {
                            if (item.candidateId == candidatesModel.get(candidateTable.getSelectedRow()).candidateId) {
                                found = 1;
                                break;
                            }
                        }
                    }
                    if (found == 1) {
                        resumeCandidateButton.setText("Update Resume");
                    } else {
                        resumeCandidateButton.setText("Insert Resume");
                    }
                }
            });
            candidateScrollPane = new JScrollPane(candidateTable);
            candidateTable.setFillsViewportHeight(true);
            candidateTable.setDefaultRenderer(Object.class, new MyTableCellRender());
            candidateTableModel = (DefaultTableModel) candidateTable.getModel();
            for (int i = 0; i < columns.length; i++) {
                candidateTableModel.addColumn(columns[i]);
            }

            candidateTable.setRowHeight(height * 5 / 100);
            candidateTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 18));
            candidateTable.setShowGrid(true);
            candidateTable.setBackground(new Color(204, 204, 204));
            candidateScrollPane.setLocation(width * 1 / 100, height * 15 / 100);
            candidateScrollPane.setSize(width * 98 / 100, height * 71 / 100);
            panel.add(candidateScrollPane);
            setCandidateDataToTable();
        } else {
            String fieldsName[] = {"*Name", "*Address", "*Birthdate", "Email", "Residence Number", "Business Number", "*Driver Information", "*Degree",
                "*Position Desired", "Geographic Preference", "Salary Desired", "Current Position Salary", "One Previous Position Salary",
                "Two Previous Position Salary", "Three Previous Position Salary", "Leaving Reason", "Interview Impressions", "Consultant Initials",
                "Ratings", "Tenure Responsibilities", "Marital Status", "Travel Preference"};
            String comboBoxValues[][] = {{"Yes", "Pending", "No"}, {"Married", "Unmarried"}, {"Yes", "No"}};
            int x = 4, y = 2, count = 1;
            JPanel container = new JPanel();
            jsp = new JScrollPane(container);
            jsp.setLocation(width * 1 / 100, height * 3 / 100);
            jsp.setSize(width * 98 / 100, height * 82 / 100);
            container.setLayout(null);
            container.setPreferredSize(new Dimension(width * 97 / 100, height * 138 / 100));
            JLabel[] labels = new JLabel[fieldsName.length];
            JScrollPane[] scrollArray = new JScrollPane[3];
            textFields = new JTextField[15];
            textAreas = new JTextArea[3];
            comboBoxes = new JComboBox[4];
            fieldsLength = fieldsName.length;
            Font currentFont;
            for (int i = 0; i < fieldsName.length; i++) {
                labels[i] = new JLabel(fieldsName[i] + " :");
                currentFont = labels[i].getFont();
                labels[i].setFont(currentFont.deriveFont(Font.BOLD, width * 1.1f / 100));
                labels[i].setSize(width, height * 5 / 100);
                labels[i].setLocation(width * x / 100, height * y / 100);
                container.add(labels[i]);

                if (i < 15) {
                    textFields[i] = new JTextField();
                    textFields[i].setSize(width * 15 / 100, height * 5 / 100);
                    textFields[i].setLocation(width * x / 100, height * (y + 5) / 100);
                    if (i == 2) {
                        textFields[i].setEnabled(false);
                        textFields[i].setDisabledTextColor(Color.BLACK);
                        textFields[i].setName("name" + i);
                        textFields[i].addMouseListener(new MouseAdapter() {
                            @Override
                            public void mouseClicked(MouseEvent e) {
                                if (!waiting) {
                                    JTextField textField;
                                    textField = (JTextField) e.getSource();
                                    String date = new DatePicker(Home.this, textField.getText()).setPickedDate();
                                    textField.setText(date);
                                }
                            }
                        });
                    }
                    container.add(textFields[i]);
                } else if (i >= 15 && i < 18) {
                    textAreas[i - 15] = new JTextArea();
                    scrollArray[i - 15] = new JScrollPane(textAreas[i - 15]);
                    scrollArray[i - 15].setSize(width * 15 / 100, height * 15 / 100);
                    scrollArray[i - 15].setLocation(width * x / 100, height * (y + 5) / 100);
                    container.add(scrollArray[i - 15]);
                } else if (i == 18) {
                    SpinnerModel value = new SpinnerNumberModel(0, 0, 5, 1);
                    spinner = new JSpinner(value);
                    spinner.setSize(width * 8 / 100, height * 5 / 100);
                    spinner.setLocation(width * x / 100, height * (y + 5) / 100);
                    currentFont = spinner.getFont();
                    spinner.setFont(currentFont.deriveFont(Font.BOLD, width * 0.9f / 100));
                    JComponent editor = spinner.getEditor();
                    if (editor instanceof JSpinner.DefaultEditor) {
                        spinnerEditor = (JSpinner.DefaultEditor) editor;
                        spinnerEditor.getTextField().setHorizontalAlignment(JTextField.CENTER);
                        spinnerEditor.getTextField().setEnabled(false);
                        spinnerEditor.getTextField().setDisabledTextColor(Color.BLACK);
                    }
                    container.add(spinner);
                } else {
                    comboBoxes[i - 19] = new JComboBox(comboBoxValues[i - 19]);
                    comboBoxes[i - 19].setSize(width * 10 / 100, height * 5 / 100);
                    comboBoxes[i - 19].setLocation(width * x / 100, height * (y + 5) / 100);
                    container.add(comboBoxes[i - 19]);
                }
                if ((count % 4) == 0) {
                    x = 4;
                    if (i < 15) {
                        y += 15;
                    } else {
                        y += 25;
                    }
                } else {
                    x += 25;
                }
                count++;
            }
            insertButton = new JButton("Insert");
            currentFont = insertButton.getFont();
            insertButton.setSize(width * 16 / 100, height * 8 / 100);
            insertButton.setLocation(width * 42 / 100, height * (y + 20) / 100);
            insertButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            insertButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (insertButton.isEnabled()) {
                        if (!helper.isConnected()) {
                            JOptionPane.showMessageDialog(getContentPane(),
                                    "Please check your internet connection!",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                        } else {
                            int error = 0;
                            if (textFields[0].getText().trim().length() == 0 || textFields[1].getText().trim().length() == 0 || textFields[2].getText().trim().length() == 0 || textFields[6].getText().trim().length() == 0 || textFields[7].getText().trim().length() == 0 || textFields[8].getText().trim().length() == 0) {
                                error = 1;
                            }
                            if (!helper.emailValidity(textFields[3].getText().trim()) && textFields[3].getText().trim().length() > 0) {
                                error = 2;
                            }
                            for (int i = 0; i < 18; i++) {
                                if (error == 1 || error == 2) {
                                    break;
                                }
                                if (i < 15) {
                                    if (i != 3) {
                                        if (!helper.fieldValidity(textFields[i].getText())) {
                                            error = 2;
                                        } else if (i == 9 || i == 10 || i == 11 || i == 12 || i == 13) {
                                            if (textFields[i].getText().trim().length() > 0) {
                                                if (!textFields[i].getText().trim().replace(",", ".").matches("((-|\\+)?[0-9]+(\\.[0-9]+)?)+")) {
                                                    error = 2;
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (!helper.fieldValidity(textAreas[i - 15].getText())) {
                                        error = 2;
                                    }
                                }
                            }
                            if (error == 1) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "The requirement fields cannot be blank!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else if (error == 2) {
                                JOptionPane.showMessageDialog(getContentPane(),
                                        "Invalid fields!",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {
                                if (textFields[4].getText().trim().length() == 0 && textFields[5].getText().trim().length() == 0) {
                                    JOptionPane.showMessageDialog(getContentPane(),
                                            "You must insert at least residence number or Business Number!",
                                            "Error",
                                            JOptionPane.ERROR_MESSAGE);
                                } else {
                                    int dialogButton = JOptionPane.YES_NO_OPTION;
                                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirmation", dialogButton);
                                    if (dialogResult == JOptionPane.YES_OPTION) {
                                        progressInsertTask = new ProgressInsertTask();
                                        progressInsertTask.execute();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            );
            container.add(insertButton);

            panel.add(jsp);
        }
        return panel;
    }

    private void setJobDataToTable() {
        searchJobModel = new ArrayList<JobOrderModel>();
        jobTableModel.setRowCount(0);
        ArrayList<JobOrderModel> modelToSearch;
        if (searchJobSatusComboSelectedIndex == 0) {
            modelToSearch = currentModel;
        } else if (searchJobSatusComboSelectedIndex == 1) {
            modelToSearch = pendingModel;
        } else if (searchJobSatusComboSelectedIndex == 2) {
            modelToSearch = cancelledModel;
        } else {
            modelToSearch = waitingModel;
        }

        for (JobOrderModel item : modelToSearch) {
            if ((item.dateInserted.replaceAll("/", "-").startsWith(searchJobText.getText().replaceAll("/", "-")) && jobComboSelectedIndex == 0)
                    || (String.valueOf(item.invoiceNo).startsWith(searchJobText.getText()) && jobComboSelectedIndex == 1)
                    || (item.firm.toLowerCase().startsWith(searchJobText.getText().toLowerCase()) && jobComboSelectedIndex == 2)) {
                Vector row = new Vector();
                row.add(item.dateInserted);
                row.add(item.invoiceNo);
                row.add(item.firm);
                row.add(item.contactName);
                row.add(item.phone);
                row.add(item.status);
                jobTableModel.addRow(row);
                searchJobModel.add(item);
            }
        }
        if (tabbedPaneCreated) {
            tabbedPane.setTitleAt(0, "Job Requests (" + searchJobModel.size() + ")");
        }
    }

    private void setCandidateDataToTable() {
        resumeCandidateButton.setText("Resume");
        candidateTableModel.setRowCount(0);
        searchCandidateModel = new ArrayList<CandidateModel>();
        for (CandidateModel item : candidatesModel) {
            if ((item.name.toLowerCase().startsWith(searchCandidateText.getText().toLowerCase()) && searchCandidateComboSelectedIndex == 0)
                    || (item.address.toLowerCase().startsWith(searchCandidateText.getText().toLowerCase()) && searchCandidateComboSelectedIndex == 1)) {
                Vector row = new Vector();
                row.add(item.name);
                row.add(item.address);
                row.add(item.residenceNumber);
                row.add(item.businessNumber);
                candidateTableModel.addRow(row);
                searchCandidateModel.add(item);
            }
        }
        if (tabbedPaneCreated) {
            tabbedPane.setTitleAt(1, "Candidates (" + searchCandidateModel.size() + ")");
        }
    }

    public void stateChanged(ChangeEvent e) {
        if (prevSelectedTabIndex == 0) {
            jobTable.clearSelection();
            searchJobText.setText("");
            searchJobSatusComboBox.setSelectedIndex(0);
            jobsComboBox.setSelectedIndex(0);
            jobScrollPane.getVerticalScrollBar().setValue(0);
            jobScrollPane.getHorizontalScrollBar().setValue(0);

        } else if (prevSelectedTabIndex == 1) {
            candidateTable.clearSelection();
            searchCandidateText.setText("");
            searchCandidateComboBox.setSelectedIndex(0);
            candidateScrollPane.getVerticalScrollBar().setValue(0);
            candidateScrollPane.getHorizontalScrollBar().setValue(0);
            resumeCandidateButton.setText("Resume");
        } else {
            for (int i = 0; i < fieldsLength; i++) {
                if (i < 15) {
                    textFields[i].setText("");
                } else if (i >= 15 && i < 18) {
                    textAreas[i - 15].setText("");
                } else if (i == 18) {
                    spinner.setValue(0);
                } else {
                    comboBoxes[i - 19].setSelectedIndex(0);
                }
                jsp.getVerticalScrollBar().setValue(0);
                jsp.getHorizontalScrollBar().setValue(0);
            }
        }
        tabbedPane = (JTabbedPane) e.getSource();
        int selectedIndex = tabbedPane.getSelectedIndex();
        if (selectedIndex == 0) {
            setJobDataToTable();
        } else if (selectedIndex == 1) {
            setCandidateDataToTable();
        }
        prevSelectedTabIndex = selectedIndex;
    }

    class ProgressTaskJob extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            waiting = true;
            tabbedPane.setEnabled(false);
            jobsComboBox.setEnabled(false);
            searchJobSatusComboBox.setEnabled(false);
            searchJobText.setEnabled(false);
            detailsJobButton.setEnabled(false);
            pendingJobButton.setEnabled(false);
            foundJobButton.setEnabled(false);
            deleteJobButton.setEnabled(false);
            setCursor(Cursor.WAIT_CURSOR);
            if (buttonClicked == 1) //pending button clicked
            {
                JobOrderModel temp = searchJobModel.get(jobTable.getSelectedRow());
                String url = helper.getDomainName() + "insertPendingJob.php";
                String urlParameters = "id=" + temp.jobOrderId;
                String response = helper.postMethod(url, urlParameters);
                if (response.charAt(0) == 'A') {
                    JOptionPane.showMessageDialog(getContentPane(),
                            response,
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    helper.writeToFile(username + " put into pending list the jobOrderId: " + searchJobModel.get(jobTable.getSelectedRow()).jobOrderId);
                    searchJobModel.remove(jobTable.getSelectedRow());
                    int index = helper.getJobModelIndex(temp.jobOrderId, currentModel);
                    currentModel.remove(index);
                    pendingModel.add(temp);
                    setJobDataToTable();
                    JOptionPane.showMessageDialog(getContentPane(),
                            "The job order has successfully moved to pending list!");
                }
            } else if (buttonClicked == 2) //found button clicked
            {
                JobOrderModel temp = searchJobModel.get(jobTable.getSelectedRow());
                String urlParameters = "id=" + temp.jobOrderId;
                String url = "";
                if (searchJobSatusComboSelectedIndex == 0) {
                    url = helper.getDomainName() + "foundCurrentJob.php";
                } else {
                    url = helper.getDomainName() + "foundPendingJob.php";
                }
                String response = helper.postMethod(url, urlParameters);
                if (response.charAt(0) == 'A') {
                    JOptionPane.showMessageDialog(getContentPane(),
                            response,
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    String text = "Dear Sir,\n\nAfter your request we found " + candidateIds.length;
                    String fileMsg = username + " found " + candidateIds.length;
                    urlParameters = "&candidateId=" + candidateIds[0] + "&clientId=" + temp.clientId;
                    url = helper.getDomainName() + "insertCandidateFound.php";
                    helper.postMethod(url, urlParameters);
                    if (candidateIds.length == 1) {
                        text += " candidate ( " + candidateNames[0] + " ) for your company!\n\nWe will communicate with " + temp.contactName + " to " + temp.phone;
                        fileMsg += " candidate ( " + candidateNames[0] + " )";
                    } else {
                        text += " candidates ( " + candidateNames[0];
                        fileMsg += " candidates ( " + candidateNames[0];
                        for (int i = 1; i < candidateIds.length; i++) {
                            urlParameters = "&candidateId=" + candidateIds[i] + "&clientId=" + temp.clientId;
                            url = helper.getDomainName() + "insertCandidateFound.php";
                            helper.postMethod(url, urlParameters);
                            text += ", " + candidateNames[i];
                            fileMsg += ", " + candidateNames[i];
                        }
                        text += " ) for your company!\n\nWe will communicate with " + temp.contactName + " to " + temp.phone;
                        fileMsg += " )";
                    }
                    fileMsg += " for jobOrderId: " + temp.jobOrderId;
                    try {
                        helper.sendEmail(temp.clientEmail, text, "PEC - Candidate Found");
                    } catch (MessagingException ex) {
                        Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    helper.writeToFile(fileMsg);
                    searchJobModel.remove(jobTable.getSelectedRow());
                    if (searchJobSatusComboSelectedIndex == 0) {
                        int index = helper.getJobModelIndex(temp.jobOrderId, currentModel);
                        currentModel.remove(index);
                    } else {
                        int index = helper.getJobModelIndex(temp.jobOrderId, pendingModel);
                        pendingModel.remove(index);
                    }
                    temp.status = "waiting";
                    waitingModel.add(temp);
                    setJobDataToTable();
                    JOptionPane.showMessageDialog(getContentPane(),
                            "An email has been sent to the company!");
                }
            } else //delete button clicked
            {
                JobOrderModel temp = searchJobModel.get(jobTable.getSelectedRow());
                String url = "";
                String urlParameters = "id=" + temp.jobOrderId;
                String fileMsg = username + " delete jobOrderId: " + searchJobModel.get(jobTable.getSelectedRow()).jobOrderId;
                if (searchJobSatusComboSelectedIndex == 0) {
                    url = helper.getDomainName() + "deleteCurrentJob.php";
                } else if (searchJobSatusComboSelectedIndex == 1) {
                    url = helper.getDomainName() + "deletePendingJob.php";
                } else if (searchJobSatusComboSelectedIndex == 2) {
                    url = helper.getDomainName() + "deleteCancelledJob.php";
                } else {
                    url = helper.getDomainName() + "deleteWaitingJob.php";
                    urlParameters += "&candidateId=" + temp.candidateId;
                    fileMsg += " with status: '" + temp.status + "'";
                }
                String response = helper.postMethod(url, urlParameters);
                if (response.charAt(0) == 'A') {
                    JOptionPane.showMessageDialog(getContentPane(),
                            response,
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    helper.writeToFile(fileMsg);
                    searchJobModel.remove(jobTable.getSelectedRow());
                    if (searchJobSatusComboSelectedIndex == 0) {
                        int index = helper.getJobModelIndex(temp.jobOrderId, currentModel);
                        currentModel.remove(index);
                    } else if (searchJobSatusComboSelectedIndex == 1) {
                        int index = helper.getJobModelIndex(temp.jobOrderId, pendingModel);
                        pendingModel.remove(index);
                    } else if (searchJobSatusComboSelectedIndex == 2) {
                        int index = helper.getJobModelIndex(temp.jobOrderId, cancelledModel);
                        cancelledModel.remove(index);
                    } else {
                        int index = helper.getJobModelIndex(temp.jobOrderId, waitingModel);
                        waitingModel.remove(index);
                        if (temp.candidateId > 0) {
                            index = helper.getResumeModelIndex(temp.candidateId, resumesModel, 1);
                            resumesModel.remove(index);
                            index = helper.getCandidateModelIndex(temp.candidateId, candidatesFoundModel);
                            candidatesFoundModel.remove(index);
                        }
                    }
                    setJobDataToTable();
                    JOptionPane.showMessageDialog(getContentPane(),
                            "The selected job order has been deleted successfully!");
                }
            }
            waiting = false;
            tabbedPane.setEnabled(true);
            jobsComboBox.setEnabled(true);
            searchJobSatusComboBox.setEnabled(true);
            searchJobText.setEnabled(true);
            detailsJobButton.setEnabled(true);
            pendingJobButton.setEnabled(true);
            foundJobButton.setEnabled(true);
            deleteJobButton.setEnabled(true);
            setCursor(Cursor.DEFAULT_CURSOR);
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    class ProgressInsertTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            setCursor(Cursor.WAIT_CURSOR);
            tabbedPane.setEnabled(false);
            insertButton.setEnabled(false);
            waiting = true;
            String parameterFields[] = {"name", "address", "birthdate", "email", "residenceNumber", "businessNumber", "driverInformation", "degree",
                "positionDesired", "geographicPreference", "salaryDesired", "currentPositionSalary", "onePreviousPositionSalary",
                "twoPreviousPositionSalary", "threePreviousPositionSalary", "leavingReason", "interviewImpressions", "consultantInitials",
                "ratings", "tenureResponsibilities", "maritalStatus", "travelPreference"};
            double salaryDesired, currentPositionSalary, onePreviousPositionSalary, twoPreviousPositionSalary, threePreviousPositionSalary;
            int i;
            if (textFields[9].getText().trim().length() == 0) {
                salaryDesired = 0;
            } else {
                salaryDesired = Double.parseDouble(textFields[9].getText().trim().replace(",", "."));
            }
            if (textFields[10].getText().trim().length() == 0) {
                currentPositionSalary = 0;
            } else {
                currentPositionSalary = Double.parseDouble(textFields[10].getText().trim().replace(",", "."));
            }
            if (textFields[11].getText().trim().length() == 0) {
                onePreviousPositionSalary = 0;
            } else {
                onePreviousPositionSalary = Double.parseDouble(textFields[11].getText().trim().replace(",", "."));
            }
            if (textFields[12].getText().trim().length() == 0) {
                twoPreviousPositionSalary = 0;
            } else {
                twoPreviousPositionSalary = Double.parseDouble(textFields[12].getText().trim().replace(",", "."));
            }
            if (textFields[13].getText().trim().length() == 0) {
                threePreviousPositionSalary = 0;
            } else {
                threePreviousPositionSalary = Double.parseDouble(textFields[13].getText().trim().replace(",", "."));
            }
            String urlParameters = parameterFields[0] + "=" + textFields[0].getText().trim();
            textFields[0].setEnabled(false);
            for (i = 1; i < fieldsLength; i++) {
                if (i < 15) {
                    textFields[i].setEnabled(false);
                    urlParameters += "&" + parameterFields[i] + "=" + textFields[i].getText().trim();
                } else if (i >= 15 && i < 18) {
                    textAreas[i - 15].setEnabled(false);
                    urlParameters += "&" + parameterFields[i] + "=" + textAreas[i - 15].getText().trim().replaceAll("\\n", "@");
                } else if (i == 18) {
                    spinner.setEnabled(false);
                    spinnerEditor.getTextField().setDisabledTextColor(null);
                    urlParameters += "&" + parameterFields[i] + "=" + spinner.getValue();
                } else {
                    comboBoxes[i - 19].setEnabled(false);
                    urlParameters += "&" + parameterFields[i] + "=" + comboBoxes[i - 19].getSelectedItem();
                }
            }
            String url = helper.getDomainName() + "insertCandidate.php";
            String response = helper.postMethod(url, urlParameters);
            if (response.charAt(0) == 'A') {
                JOptionPane.showMessageDialog(getContentPane(),
                        response,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                for (i = 0; i < fieldsLength; i++) {
                    if (i < 15) {
                        textFields[i].setEnabled(true);
                        if (i == 2) {
                            textFields[i].setEnabled(false);
                        }
                    } else if (i >= 15 && i < 18) {
                        textAreas[i - 15].setEnabled(true);
                    } else if (i == 18) {
                        spinner.setEnabled(true);
                        spinnerEditor.getTextField().setDisabledTextColor(Color.BLACK);
                    } else {
                        comboBoxes[i - 19].setEnabled(true);
                    }
                }
            } else {
                CandidateModel temp = new CandidateModel();
                temp.candidateId = Long.parseLong(response);
                temp.name = textFields[0].getText().trim();
                temp.address = textFields[1].getText().trim();
                temp.birthdate = textFields[2].getText().trim();
                temp.email = textFields[3].getText().trim();
                temp.residenceNumber = textFields[4].getText().trim();
                temp.businessNumber = textFields[5].getText().trim();
                temp.driverInformation = textFields[6].getText().trim();
                temp.degree = textFields[7].getText().trim();
                temp.positionDesired = textFields[8].getText().trim();
                temp.geographicPreference = textFields[9].getText().trim();
                temp.salaryDesired = salaryDesired;
                temp.currentPositionSalary = currentPositionSalary;
                temp.onePreviousPositionSalary = onePreviousPositionSalary;
                temp.twoPreviousPositionSalary = twoPreviousPositionSalary;
                temp.threePreviousPositionSalary = threePreviousPositionSalary;
                temp.leavingReason = textAreas[0].getText().trim().replaceAll("\\n", "@");
                temp.interviewImpressions = textAreas[1].getText().trim().replaceAll("\\n", "@");
                temp.consultantInitials = textAreas[2].getText().trim().replaceAll("\\n", "@");
                temp.ratings = (int) spinner.getValue();
                temp.tenureResponsibilities = String.valueOf(comboBoxes[0].getSelectedItem());
                temp.maritalStatus = String.valueOf(comboBoxes[1].getSelectedItem());
                temp.travelPreference = String.valueOf(comboBoxes[2].getSelectedItem());
                int index = 0;
                for (CandidateModel item : candidatesModel) {
                    if (temp.ratings > item.ratings) {
                        break;
                    }
                    index++;
                }
                candidatesModel.add(index, temp);
                helper.writeToFile(username + " insert a candidate with id: " + temp.candidateId);
                setCandidateDataToTable();
                JOptionPane.showMessageDialog(getContentPane(),
                        "The candidate has been inserted successfully!");
                for (i = 0; i < fieldsLength; i++) {
                    if (i < 15) {
                        textFields[i].setEnabled(true);
                        textFields[i].setText("");
                        if (i == 2) {
                            textFields[i].setEnabled(false);
                        }
                    } else if (i >= 15 && i < 18) {
                        textAreas[i - 15].setEnabled(true);
                        textAreas[i - 15].setText("");
                    } else if (i == 18) {
                        spinner.setEnabled(true);
                        spinnerEditor.getTextField().setDisabledTextColor(Color.BLACK);
                        spinner.setValue(0);
                    } else {
                        comboBoxes[i - 19].setEnabled(true);
                        comboBoxes[i - 19].setSelectedIndex(0);
                    }
                }
                jsp.getVerticalScrollBar().setValue(0);
                jsp.getHorizontalScrollBar().setValue(0);
            }
            waiting = false;
            tabbedPane.setEnabled(true);
            insertButton.setEnabled(true);
            setCursor(Cursor.DEFAULT_CURSOR);
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    class ProgressDeleteTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            waiting = true;
            setCursor(Cursor.WAIT_CURSOR);
            tabbedPane.setEnabled(false);
            deleteCandidateButton.setEnabled(false);
            resumeCandidateButton.setEnabled(false);
            detailsCandidateButton.setEnabled(false);
            searchCandidateText.setEnabled(false);
            searchCandidateComboBox.setEnabled(false);
            String url = helper.getDomainName() + "deleteCandidate.php";
            String urlParameters = "candidateId=" + searchCandidateModel.get(candidateTable.getSelectedRow()).candidateId;
            String response = helper.postMethod(url, urlParameters);
            if (response.charAt(0) == 'A') {
                JOptionPane.showMessageDialog(getContentPane(),
                        response,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                helper.writeToFile(username + " delete the candidate with id: " + searchCandidateModel.get(candidateTable.getSelectedRow()).candidateId);
                int index = helper.getCandidateModelIndex(searchCandidateModel.get(candidateTable.getSelectedRow()).candidateId, candidatesModel);
                candidatesModel.remove(index);
                setCandidateDataToTable();
                JOptionPane.showMessageDialog(getContentPane(),
                        response);
            }
            waiting = false;
            tabbedPane.setEnabled(true);
            deleteCandidateButton.setEnabled(true);
            detailsCandidateButton.setEnabled(true);
            resumeCandidateButton.setEnabled(true);
            searchCandidateText.setEnabled(true);
            searchCandidateComboBox.setEnabled(true);
            setCursor(Cursor.DEFAULT_CURSOR);
            candidateTable.getTableHeader().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    class ProgressGetCandidatesTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            waiting = true;
            setCursor(Cursor.WAIT_CURSOR);
            tabbedPane.setEnabled(false);
            jobsComboBox.setEnabled(false);
            searchJobSatusComboBox.setEnabled(false);
            searchJobText.setEnabled(false);
            detailsJobButton.setEnabled(false);
            pendingJobButton.setEnabled(false);
            foundJobButton.setEnabled(false);
            deleteJobButton.setEnabled(false);
            String urlString = helper.getDomainName() + "candidatesFoundHistory.php?id=" + searchJobModel.get(jobTable.getSelectedRow()).clientId;
            ArrayList<CandidateModel> tempCandidatesModel = helper.getCandidates(urlString, 1, 2);
            JFrame frame = new JFrame("Candidates");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.getContentPane().setBackground(Color.GRAY);
            frame.setResizable(false);
            frame.setVisible(true);
            frame.setLayout(null);
            frame.setSize(width * 30 / 100, height * 80 / 100);
            frame.setLocationRelativeTo(null);
            JTable table = new JTable();
            JScrollPane scrollPane = new JScrollPane(table);
            table.setFillsViewportHeight(true);
            table.setDefaultRenderer(Object.class, new MyTableCellRender());
            DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
            long[] tempCandidateIds = new long[tempCandidatesModel.size()];
            int index = 0;
            tableModel.addColumn("Name");
            for (CandidateModel item : tempCandidatesModel) {
                Vector row = new Vector();
                tempCandidateIds[index] = item.candidateId;
                row.add(item.name);
                tableModel.addRow(row);
                index++;
            }
            table.setRowHeight(height * 5 / 100);
            table.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 18));
            table.setShowGrid(true);
            table.setBackground(new Color(204, 204, 204));
            scrollPane.setLocation(width * 5 / 100, height * 5 / 100);
            scrollPane.setSize(width * 20 / 100, height * 50 / 100);
            frame.add(scrollPane);

            JButton foundButton = new JButton("Found");
            Font currentFont = foundButton.getFont();
            foundButton.setSize(width * 10 / 100, height * 5 / 100);
            foundButton.setLocation(width * 10 / 100, height * 65 / 100);
            foundButton.setFont(currentFont.deriveFont(Font.PLAIN, width * 0.8f / 100));
            foundButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (!helper.isConnected()) {
                        JOptionPane.showMessageDialog(frame,
                                "Please check your internet connection!",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    } else if (table.getSelectedRowCount() == 0) {
                        JOptionPane.showMessageDialog(frame,
                                "You must choose at least one candidate!",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    } else {
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you found a candidate for this company?", "Confirmation", dialogButton);
                        if (dialogResult == JOptionPane.YES_OPTION) {
                            int[] selectedRows = table.getSelectedRows();
                            candidateIds = new long[selectedRows.length];
                            candidateNames = new String[selectedRows.length];
                            for (int i = 0; i < selectedRows.length; i++) {
                                candidateIds[i] = tempCandidateIds[selectedRows[i]];
                                candidateNames[i] = table.getValueAt(selectedRows[i], 0).toString();
                            }
                            frame.dispose();
                            buttonClicked = 2;
                            progressTaskJob = new ProgressTaskJob();
                            progressTaskJob.execute();
                        }
                    }
                }
            });
            frame.add(foundButton);
            waiting = false;
            setCursor(Cursor.DEFAULT_CURSOR);
            tabbedPane.setEnabled(true);
            jobsComboBox.setEnabled(true);
            searchJobSatusComboBox.setEnabled(true);
            searchJobText.setEnabled(true);
            detailsJobButton.setEnabled(true);
            pendingJobButton.setEnabled(true);
            foundJobButton.setEnabled(true);
            deleteJobButton.setEnabled(true);
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    class ProgressRefreshTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            waiting = true;
            setCursor(Cursor.WAIT_CURSOR);
            tabbedPane.setEnabled(false);
            jobsComboBox.setEnabled(false);
            searchJobSatusComboBox.setEnabled(false);
            searchJobText.setEnabled(false);
            detailsJobButton.setEnabled(false);
            pendingJobButton.setEnabled(false);
            foundJobButton.setEnabled(false);
            deleteJobButton.setEnabled(false);
            String urlString = helper.getDomainName() + "currentJobs.php";
            ArrayList<JobOrderModel> currentRefreshedModel = helper.getJobOrders(urlString, 0, 29);
            urlString = helper.getDomainName() + "pendingJobs.php";
            ArrayList<JobOrderModel> pendingRefreshedModel = helper.getJobOrders(urlString, 0, 29);
            urlString = helper.getDomainName() + "cancelledJobs.php";
            ArrayList<JobOrderModel> cancelledRefreshedModel = helper.getJobOrders(urlString, 1, 27);
            urlString = helper.getDomainName() + "waitingJobs.php";
            ArrayList<JobOrderModel> waitingRefreshedModel = helper.getJobOrders(urlString, 2, 31);
            urlString = helper.getDomainName() + "getCandidates.php";
            candidatesModel = helper.getCandidates(urlString, 0, 23);
            urlString = helper.getDomainName() + "getCandidatesFoundDetails.php";
            candidatesFoundModel = helper.getCandidates(urlString, 0, 23);
            urlString = helper.getDomainName() + "getResumes.php";
            resumesModel = helper.getResumes(urlString);
            int current = 0, pending = 0, cancelled = 0, wait = 0;
            current = currentRefreshedModel.size() - currentModel.size();
            if (current < 0) {
                current = -current;
            }
            pending = pendingRefreshedModel.size() - pendingModel.size();
            if (pending < 0) {
                pending = -pending;
            }
            cancelled = cancelledRefreshedModel.size() - cancelledModel.size();
            if (cancelled < 0) {
                cancelled = -cancelled;
            }
            wait = waitingRefreshedModel.size() - waitingModel.size();
            if (wait < 0) {
                wait = -wait;
            }
            currentModel = helper.refreshedJobModel(currentRefreshedModel, currentModel);
            pendingModel = helper.refreshedJobModel(pendingRefreshedModel, pendingModel);
            cancelledModel = helper.refreshedJobModel(cancelledRefreshedModel, cancelledModel);
            waitingModel = helper.refreshedJobModel(waitingRefreshedModel, waitingModel);
            waiting = false;
            setCursor(Cursor.DEFAULT_CURSOR);
            tabbedPane.setEnabled(true);
            jobsComboBox.setEnabled(true);
            searchJobSatusComboBox.setEnabled(true);
            searchJobText.setEnabled(true);
            detailsJobButton.setEnabled(true);
            pendingJobButton.setEnabled(true);
            foundJobButton.setEnabled(true);
            deleteJobButton.setEnabled(true);
            searchJobText.setText("");
            searchJobSatusComboBox.setSelectedIndex(0);
            jobsComboBox.setSelectedIndex(0);
            jobScrollPane.getVerticalScrollBar().setValue(0);
            jobScrollPane.getHorizontalScrollBar().setValue(0);
            candidateTable.getTableHeader().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            if (refresh == 1) {
                setJobDataToTable();
                tabbedPane.setTitleAt(1, "Candidates (" + candidatesModel.size() + ")");
            } else {
                setCandidateDataToTable();
                tabbedPane.setTitleAt(0, "Job Requests (" + currentModel.size() + ")");
            }
            JOptionPane.showMessageDialog(getContentPane(),
                    "Refreshed current jobs found: " + current + "\nRefreshed pending jobs found: " + pending + "\nRefreshed cancelled jobs found: " + cancelled + "\nRefreshed waiting jobs status: " + wait);
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
